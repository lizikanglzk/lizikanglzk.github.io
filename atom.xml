<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lizikang_Blog</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-08-25T06:31:13.763Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>李子康</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构 第8讲 最小生成树、最短路、关键路径</title>
    <link href="http://yoursite.com/2021/08/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/sjjg_5_2/"/>
    <id>http://yoursite.com/2021/08/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/sjjg_5_2/</id>
    <published>2021-08-06T16:00:00.000Z</published>
    <updated>2021-08-25T06:31:13.763Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第8讲-最小生成树、最短路、关键路径"><a href="#第8讲-最小生成树、最短路、关键路径" class="headerlink" title="第8讲 最小生成树、最短路、关键路径"></a>第8讲 最小生成树、最短路、关键路径</h3><h4 id="1-最小生成树-MST"><a href="#1-最小生成树-MST" class="headerlink" title="1.最小生成树  MST"></a>1.最小生成树  MST</h4><blockquote><p>无向图</p><p><strong>不一定唯一</strong></p><p>唯一条件： 任意环中边权都不同</p></blockquote><p>(1) Prim</p><blockquote><p>朴素： $O(n^2)$  稠密图  </p><p>堆优化： $O(mlogn)$  稀疏图   少用</p><p><a href="https://www.acwing.com/problem/content/860/" target="_blank" rel="noopener"><strong>AcWing 858. Prim算法求最小生成树</strong></a></p><p>S:当前已经在联通块中的所有点的集合</p><ol><li>dist[i] = inf</li><li>for n 次<br>找到不在s集合中，距离s集合最近的点t<br>将这个点t放入集合中<br>利用这个点t， 更新不在集合中的点</li></ol><p>联系：Dijkstra算法是更新到起始点的距离，Prim是更新到集合S的距离</p><p><strong>Prim算法与Dijkstra算法的区别</strong><br>Dijkstra算法是更新不在集合中的点 离起点的距离</p><p>dist[j]=min(dist[j], dist[t]+g[t][j])</p><p>Prim是更新不在集合中的点 离集合S的距离</p><p>dist[j] = min(dist[j], g[t][j])</p></blockquote><p>c++:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">505</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">int</span> g[N][N], dist[N]; <span class="hljs-comment">//dist存储其他点到S的距离</span><br><span class="hljs-keyword">bool</span> st[N];<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">prim</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-comment">// n个点</span><br>    &#123;<br>        <span class="hljs-comment">// 寻找离集合S最近的点  </span><br>        <span class="hljs-keyword">int</span> t  = <span class="hljs-number">-1</span> ;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;=n ;j++)<br>            <span class="hljs-keyword">if</span>(!st[j] &amp;&amp; ( t==<span class="hljs-number">-1</span> || dist[t]&gt;dist[j] ) )<br>                t = j ; <span class="hljs-comment">// 更新t </span><br><br>        <span class="hljs-comment">// 当前可选的最短路径的点距离都是INF 说明不联通，return</span><br>        <span class="hljs-keyword">if</span>(dist[t] == INF ) <span class="hljs-keyword">return</span> INF;<br><br>        st[t]= <span class="hljs-literal">true</span>;<br><br>        res += dist[t];<br>        <span class="hljs-comment">//利用这个点t， 更新不在集合中的点</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;j&lt;=n;j++)<br>            dist[j] = <span class="hljs-built_in">min</span>(dist[j],g[t][j]);<br><br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-built_in">memset</span>(g,<span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> g);<br>    <span class="hljs-keyword">while</span> (m -- )&#123;<br>        <span class="hljs-keyword">int</span> a,b,c;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>        g[a][b] = g[b][a] = <span class="hljs-built_in">min</span>(g[a][b],c);<br>    &#125;<br>    <span class="hljs-keyword">int</span> res = prim();<br>    <span class="hljs-keyword">if</span>(res == INF) <span class="hljs-built_in">puts</span>(<span class="hljs-string">"impossible"</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>(2) Kruskal</p><blockquote><p>并查集 笔试不考</p><p>$O(mlogn)$</p><p>看边权，每次看最小边权的边，加后是否形成环，不形成环可加</p></blockquote><h4 id="2-最短路"><a href="#2-最短路" class="headerlink" title="2.最短路"></a>2.最短路</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210805173335984.png" alt="image-20210805173335984" loading="lazy"></p><p>(1) 单源最短路 Dijkstra</p><p><a href="https://www.acwing.com/problem/content/851/" target="_blank" rel="noopener"><strong>AcWing 849. Dijkstra求最短路 I</strong></a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">505</span>,INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">int</span> g[N][N],dist[N];<br><span class="hljs-keyword">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dij</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-built_in">memset</span>(dist, INF, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )&#123;<br>        <span class="hljs-comment">// n个点</span><br>        <span class="hljs-keyword">int</span> t  =<span class="hljs-number">-1</span> ;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            <span class="hljs-keyword">if</span>( !st[j]&amp;&amp; (t==<span class="hljs-number">-1</span>|| dist[t]&gt;dist[j] ) )<br>            t = j;<br>        &#125;<br><br>        st[t] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-comment">// 更新</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )&#123;<br><br>            dist[j] = <span class="hljs-built_in">min</span>(dist[j],dist[t]+ g[t][j]);<br><br>        &#125;<br><br><br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-built_in">memset</span>(g, INF, <span class="hljs-keyword">sizeof</span> g);<br>    <span class="hljs-keyword">while</span> (m -- )&#123;<br>        <span class="hljs-keyword">int</span> a,b,c;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>        g[a][b] = <span class="hljs-built_in">min</span>(g[a][b],c);<br><br>    &#125;<br><br>    <span class="hljs-keyword">int</span> res = dij();<br>    <span class="hljs-keyword">if</span>(res == INF) <span class="hljs-built_in">puts</span>(<span class="hljs-string">"-1"</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="hljs-built_in">endl</span>;<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>(2) 多源汇最短路 Floyd</p><blockquote><p><a href="https://www.acwing.com/problem/content/856/" target="_blank" rel="noopener"><strong>AcWing 854. Floyd求最短路</strong></a></p><p>$O(n^3)$</p><p>实际上是dp的思想，笔试不考dp，了解算法即可</p><p>$d[i][j] = min(d[i][j], d[i][k] + d[k][j])$</p><p>1-&gt;2-&gt; 3  与 1-&gt;3 比较 ，更新</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">205</span>,INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">int</span> n,m,Q;<br><span class="hljs-keyword">int</span> d[N][N];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    <br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;Q;<br>    <br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> d);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i&lt;=n; i++ ) d[i][i] = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span> (m -- )&#123;<br>        <br>        <br>        <span class="hljs-keyword">int</span> a,b,c;<br>        <br>        <span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>        <br>        d[a][b] = <span class="hljs-built_in">min</span>(d[a][b],c);<br>        <br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k= <span class="hljs-number">1</span>;k&lt;=n;k++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;j&lt;=n;j++)<br>                d[i][j] = <span class="hljs-built_in">min</span>( d[i][j], d[i][k] + d[k][j] );<br>    <br>    <br>    <br>    <span class="hljs-keyword">while</span>(Q--)&#123;<br>        <span class="hljs-keyword">int</span> x,y;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y;<br>        <span class="hljs-keyword">if</span>(d[x][y]&gt;INF/<span class="hljs-number">2</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">"impossible"</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;d[x][y]&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <br>    <br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-关键路径"><a href="#3-关键路径" class="headerlink" title="3.关键路径"></a>3.关键路径</h4><blockquote><p>拓扑排序的 运用</p><p>最长路    递推</p><p>点：事件、边：活动</p><p>事件最早开始时间</p><p>事件最晚开始时间</p><p>活动最早开始时间</p><p>活动最晚开始时间</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210805181407071.png" alt="image-20210805181407071" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210806160659990.png" alt="image-20210806160659990" loading="lazy"></p><h4 id="4-考题：2011-41、2012-7、2012-8、2013-9、2015-6、2015-42、2016-8、2017-42、2018-42、2019-5、2020-7、2020-8"><a href="#4-考题：2011-41、2012-7、2012-8、2013-9、2015-6、2015-42、2016-8、2017-42、2018-42、2019-5、2020-7、2020-8" class="headerlink" title="4.考题：2011-41、2012-7、2012-8、2013-9、2015-6、2015-42、2016-8、2017-42、2018-42、2019-5、2020-7、2020-8"></a>4.考题：2011-41、2012-7、2012-8、2013-9、2015-6、2015-42、2016-8、2017-42、2018-42、2019-5、2020-7、2020-8</h4><p><strong>2011-41</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210806151105388.png" alt="image-20210806151105388" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210806151217433.png" alt="image-20210806151217433" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210806152213614.png" alt="" loading="lazy"></p><p><strong>2012-7</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210806151359247.png" alt="image-20210806151359247" loading="lazy"></p><blockquote><p>路径从小到大，</p><p>b:2,c:3,d:5,e:6,f:4</p><p>bcfde</p><p>选C</p></blockquote><p><strong>2012-8</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210806151438416.png" alt="image-20210806151438416" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210806151425436.png" alt="image-20210806151425436" loading="lazy"></p><blockquote><p>A</p></blockquote><p><strong>2013-9</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210806151510412.png" alt="image-20210806151510412" loading="lazy"></p><blockquote><p>求关键路径，最长路径</p><p>bdcg</p><p>bdeh</p><p>bfh</p><p>选C</p></blockquote><p><strong>2015-6</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210806151527963.png" alt="image-20210806151527963" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210806151537094.png" alt="image-20210806151537094" loading="lazy"></p><blockquote><p>Kruskal : 每次选最小边，加入看是否成环</p><p>Prime：选相邻最小边</p><p>Kruskal：第一次选5，第二次选8 </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210807093135980.png" alt="image-20210807093135980" loading="lazy"></p><p>Prime：v4开始</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210807093237097.png" alt="image-20210807093237097" loading="lazy"></p><p>（v2,v3）</p><p>选C</p></blockquote><p><strong>2015-42</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210806151558118.png" alt="image-20210806151558118" loading="lazy"></p><blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210807093942975.png" alt="image-20210807093942975" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210807100345267.png" alt="image-20210807100345267" loading="lazy"></p></blockquote><p><strong>2016-8</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210806151619915.png" alt="image-20210806151619915" loading="lazy"></p><blockquote><p>2:5 , 3: 7 , 4: 9, 5: 4 ,6:9</p><p>5、2、3、6、4</p><p>B</p></blockquote><p><strong>2017-42</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210806151656567.png" alt="image-20210806151656567" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210806151714194.png" alt="image-20210806151714194" loading="lazy"></p><blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210807094035578.png" alt="image-20210807094035578" loading="lazy"></p><p>2.唯一</p><p>3.唯一条件： 任意环中边权都不同</p></blockquote><p><strong>2018-42</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210806161738976.png" alt="" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210806161759548.png" alt="image-20210806161759548" loading="lazy"></p><blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210807094626826.png" alt="image-20210807094626826" loading="lazy"></p><p>2种情况  2 + 2 + 3+ 2+ 2+3+2 = 16</p><p>TTL 时间，就是问TL -&gt; BJ 距离长度 </p><p>方案一能到，方案二不能到。</p></blockquote><p><strong>2019-5</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210806161819799.png" alt="image-20210806161819799" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210806161830371.png" alt="image-20210806161830371" loading="lazy"></p><blockquote><p>d 最早开始时间： 起点到d的最长路  8+ 4 = 12</p><p>最晚开始时间： 求最长路 (27) - 端点到终点最长路（6）-  路径（7） = 14</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210807095153193.png" alt="image-20210807095153193" loading="lazy"></p></blockquote><p><strong>2020-7</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210806161855267.png" alt="image-20210806161855267" loading="lazy"></p><blockquote><p>Kruskal : 每次选最小边，加入看是否成环,不成环就能加。</p></blockquote><p><strong>2020-8</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210806161911055.png" alt="image-20210806161911055" loading="lazy"></p><blockquote><p>边权和最大</p><p>C：如果只有一条关键路径</p><p>D： 有多条关键路径</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第8讲-最小生成树、最短路、关键路径&quot;&gt;&lt;a href=&quot;#第8讲-最小生成树、最短路、关键路径&quot; class=&quot;headerlink&quot; title=&quot;第8讲 最小生成树、最短路、关键路径&quot;&gt;&lt;/a&gt;第8讲 最小生成树、最短路、关键路径&lt;/h3&gt;&lt;h4 id=&quot;1</summary>
      
    
    
    
    <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="acwing" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/"/>
    
    
    <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 第7讲 图的基本概念、存储与遍历</title>
    <link href="http://yoursite.com/2021/07/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/sjjg_5/"/>
    <id>http://yoursite.com/2021/07/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/sjjg_5/</id>
    <published>2021-07-30T16:00:00.000Z</published>
    <updated>2021-08-25T06:30:42.183Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第7讲-图的基本概念、存储与遍历"><a href="#第7讲-图的基本概念、存储与遍历" class="headerlink" title="第7讲 图的基本概念、存储与遍历"></a>第7讲 图的基本概念、存储与遍历</h3><h4 id="1-图的基本概念"><a href="#1-图的基本概念" class="headerlink" title="1.图的基本概念"></a>1.图的基本概念</h4><p>(1) 有向图、无向图<br>(2) 度数（出度、入度）有向图(度数= 出度+ 入度)<br>(3) 简单图：不存在顶点到其自身的边，且同一条边不重复出现<br>(4) 路径、环、<strong>简单路径(路径不包括重复的点和边)</strong><br>(5) 无向完全图：<strong>任意两个顶点之间都存在边</strong>，有n个顶点的无向完全图有 n × (n - 1) / 2条边</p><blockquote><p>$C_n^2$</p></blockquote><p>(6) 有向完全图：<strong>任意两个顶点之间</strong>都存在<strong>方向护卫相反的两条弧</strong>，有n个顶点的无向完全图有 n × (n - 1) 条弧</p><blockquote><p>$A_n^2$</p></blockquote><p>(7) 稀疏图&amp;稠密图：有很少条边或弧的图称为稀疏图，反之称为稠密图，相对的概念。</p><h4 id="2-图的存储及基本操作"><a href="#2-图的存储及基本操作" class="headerlink" title="2.图的存储及基本操作"></a>2.图的存储及基本操作</h4><p>(1) <strong>邻接矩阵</strong>：适用于稠密图，可存有向图、无向图。常用。空间复杂度：$O(n^2)$   无法存重边</p><blockquote><p>$ O(n^2)$</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210729104030253.png" alt="image-20210729104030253" loading="lazy"></p><p>无向图每条边看成2条有向边</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210729104213673.png" alt="image-20210729104213673" loading="lazy"></p></blockquote><p>(2) <strong>邻接表</strong>：适用于稀疏图，可存有向图、无向图。常用。空间复杂度：O(n + m)  O(m)  可存重边</p><blockquote><p><strong>可存储重边</strong>   使用最多 </p><p>上机用的最多  vector  set stack queue？</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210729104521920.png" alt="image-20210729104521920" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210729104800116.png" alt="image-20210729104800116" loading="lazy"></p><p>当有重边：</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210729104926532.png" alt="image-20210729104926532" loading="lazy"></p></blockquote><p>(3) 邻接多重表，适用于稀疏图，可存无向图。不常用。空间复杂度：O(n + m) 可重存边</p><blockquote><p>领接表 不方便找反向边</p><p>领接表优化为邻接多重表</p></blockquote><blockquote><p>上机不会用，因为oj中会用数组模拟链表，存储连续，相邻的就是反向边。</p></blockquote><p>(4) 十字链表，适用于稀疏图，可存有向图、无向图。不常用。空间复杂度：O(n + m)  不能存重边</p><blockquote><p>对邻接矩阵优化</p><p> <img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210729110331380.png" alt="image-20210729110331380" loading="lazy"></p></blockquote><p>(5) <strong>三元组表</strong>，适用于稀疏图，可存有向图，无向图。常用于Bellman-Ford算法、Kruskal算法。空间复杂度：O(m)</p><blockquote><p>m条边 $O(m)$</p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210729110519251.png" alt="image-20210729110519251" style="zoom:50%;" / loading="lazy"></blockquote><h4 id="3-图的遍历"><a href="#3-图的遍历" class="headerlink" title="3.图的遍历"></a>3.图的遍历</h4><p>(1) 深度优先搜索。邻接表存储的时间复杂度：$O(n + m)$。邻接矩阵存储的时间复杂度：$O(n^2)$</p><blockquote><p>DFS : 能走就必须走， 判重 </p><p>深搜：能走就走，可能撞了南墙才会回头吧、</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210729111136419.png" alt="image-20210729111136419" loading="lazy"></p></blockquote><p>(2) 广度优先搜索。邻接表存储的时间复杂度：$O(n + m)$。邻接矩阵存储的时间复杂度：$O(n^2)$</p><blockquote><p>bfs 宽搜   求最短路径 </p></blockquote><h4 id="4-拓扑排序"><a href="#4-拓扑排序" class="headerlink" title="4.拓扑排序"></a>4.拓扑排序</h4><blockquote><p>拓扑排序：<strong>存在拓扑排序 == 无环</strong>  </p><p><strong>所有边从前指向后</strong></p><p>常用bfs  $ O(n+m)$</p><p><strong>入度为 0 的点</strong>、 最后判断是否每个点是否遍历到了</p></blockquote><p><a href="https://www.acwing.com/problem/content/850/" target="_blank" rel="noopener"><strong>AcWing 848. 有向图的拓扑序列</strong></a></p><p><strong>BFS</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>,M = <span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-keyword">int</span> n,m;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <br>    <span class="hljs-keyword">int</span> id;<br>    Node* next;<br>    Node(<span class="hljs-keyword">int</span> _id): id(_id),next(<span class="hljs-literal">NULL</span>)&#123;&#125;<br>    <br>&#125;*head[N];<br><br><span class="hljs-keyword">int</span> d[N] ; <span class="hljs-comment">// 入度</span><br><span class="hljs-keyword">int</span> q[N] ; <span class="hljs-comment">//数组模拟队列</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span>  <span class="hljs-comment">// 添加一条边b-&gt;a  头插法 3-&gt;2-&gt;1;</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> p = <span class="hljs-keyword">new</span> Node(b);<br>    p-&gt;next = head[a];<br>    head[a] = p;<br>    <br>&#125;<br><span class="hljs-comment">// bfs 广搜 </span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">istopsort</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> hh = <span class="hljs-number">0</span>, tt  = <span class="hljs-number">-1</span> ;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">1</span>; i&lt;=n;i++)&#123; <span class="hljs-comment">// n个点  先找到入度为0的点入队列</span><br>        <br>        <span class="hljs-keyword">if</span>(!d[i]) <span class="hljs-comment">// 此点入度为0</span><br>        &#123;<br>            q[++tt]= i ; <span class="hljs-comment">// 队列入队</span><br>        &#125;<br>        <br>    &#125; <br>    <br>    <span class="hljs-keyword">while</span>(hh&lt;=tt)&#123; <span class="hljs-comment">// 队列不为空</span><br>        <br>        <span class="hljs-keyword">int</span> t = q[hh++]; <span class="hljs-comment">// 取队头</span><br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> p= head[t];p;p=p-&gt;next)&#123; <span class="hljs-comment">//遍历 领接表 队头的链表head[t]</span><br>            <span class="hljs-keyword">if</span>(-- d[p-&gt;id] == <span class="hljs-number">0</span>)<br>                q[++tt] = p-&gt;id;  <span class="hljs-comment">// 队头去掉后; 后面相连的点入度-1 ; 为0的入队</span><br>            <br>        &#125;<br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> tt == n - <span class="hljs-number">1</span> ;  <span class="hljs-comment">//队长是否等于n-1  判断是否所有的点都入队了，就是判断是否所有点遍历到了</span><br>    <br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;  <span class="hljs-comment">// n个点 m 条边</span><br>    <br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        <span class="hljs-keyword">int</span> a,b;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b;<br>        d[b]++ ;  <span class="hljs-comment">// a-&gt;b 入度+1</span><br>        add(a,b); <span class="hljs-comment">// 插入</span><br>        <br>    &#125;<br>    <span class="hljs-comment">// for(auto p=head[1];p;p=p-&gt;next)</span><br>    <span class="hljs-comment">// cout &lt;&lt; p-&gt;id&lt;&lt;endl;</span><br>    <br>    <span class="hljs-keyword">if</span>(!istopsort()) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;<span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 不是拓扑排序</span><br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// q[N] 打印队列</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-built_in">cout</span>&lt;&lt;q[i]&lt;&lt;<span class="hljs-string">' '</span>;<br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-考题：2011-8、2012-5、2012-6、2013-7、2013-8、2014-7、2015-5、2016-6、2016-7、2017-3、2017-7、2018-7、2020-6"><a href="#5-考题：2011-8、2012-5、2012-6、2013-7、2013-8、2014-7、2015-5、2016-6、2016-7、2017-3、2017-7、2018-7、2020-6" class="headerlink" title="5.考题：2011-8、2012-5、2012-6、2013-7、2013-8、2014-7、2015-5、2016-6、2016-7、2017-3、2017-7、2018-7、2020-6"></a>5.考题：2011-8、2012-5、2012-6、2013-7、2013-8、2014-7、2015-5、2016-6、2016-7、2017-3、2017-7、2018-7、2020-6</h4><p><strong>2011-8</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210731200155030.png" alt="image-20210731200155030" loading="lazy"></p><blockquote><p><strong>简单路径(路径不包括重复的点和边)</strong></p><p><strong>邻接矩阵</strong>：适用于稠密图，可存有向图、无向图。常用。空间复杂度：O(n^2)  无法存重边</p></blockquote><p><strong>2012-5</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210731200331352.png" alt="image-20210731200331352" loading="lazy"></p><blockquote><p>广度 </p><p>遍历每条边+每个点 $O(n+e)$ </p></blockquote><p><strong>2012-6</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210731200451584.png" alt="image-20210731200451584" loading="lazy"></p><blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210731201247684.png" alt="image-20210731201247684" loading="lazy"></p><p>$i&lt;= j$ </p><p>拓扑排序：所有边从前指向后 ，存在，但一定不唯一</p></blockquote><p><strong>2013-7</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210731200505895.png" alt="image-20210731200505895" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210731201626895.png" alt="image-20210731201626895" loading="lazy"></p><p><strong>2013-8</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210731200534554.png" alt="image-20210731200534554" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210731200720120.png" alt="image-20210731200720120" loading="lazy"></p><blockquote><p>广度即是层次遍历 </p><p>这种题，我们一定要从 C , D 选项开始看  [dog]</p><p>D： a d e   D错误</p><p>方法：看每个点深度 </p><p>例如 D: abcdhefg  : 01221122 ,不是从小到大即是错的</p><p>A：hcabdegf : 01122233 </p></blockquote><p><strong>2014-7</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210731200736145.png" alt="image-20210731200736145" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210731200744719.png" alt="image-20210731200744719" loading="lazy"></p><blockquote><p>C</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210731202243426.png" alt="image-20210731202243426" loading="lazy"></p></blockquote><p><strong>2015-5</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210731200806877.png" alt="image-20210731200806877" loading="lazy"></p><blockquote><p>D</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210731202839991.png" alt="image-20210731202839991" loading="lazy"></p></blockquote><p><strong>2016-6</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210731202920328.png" alt="image-20210731202920328" loading="lazy"></p><blockquote><p>D </p><p>1-&gt;2-&gt;5-&gt;4-&gt;3</p><p>深搜：能走就走，可能撞了南墙才会回头吧、</p></blockquote><p><strong>2016-7</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210731200835228.png" alt="image-20210731200835228" loading="lazy"></p><blockquote><p>B</p></blockquote><p><strong>2017-3</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210731200858377.png" alt="image-20210731200858377" loading="lazy"></p><blockquote><p>A</p><p>十字链表，适用于稀疏图，可存有向图、无向图。不常用。空间复杂度：O(n + m)  不能存重边， 对邻接矩阵优化</p></blockquote><p><strong>2017-7</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210731200910981.png" alt="image-20210731200910981" loading="lazy"></p><blockquote><p>16条边，每条边提供2度</p><p>$2<em>16 - 4</em>3 -3*4= 8  $ </p><p>最大2 ，$ 8/2= 4$ </p><p>$ 3+4+4= 11$ </p></blockquote><p><strong>2018-7</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210731200928722.png" alt="image-20210731200928722" loading="lazy"></p><blockquote><p>D</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210731204125576.png" alt="image-20210731204125576" loading="lazy"></p></blockquote><p><strong>2020-6</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210731200947371.png" alt="image-20210731200947371" loading="lazy"></p><blockquote><p>深搜来写拓扑排序 ，每次到叶节点，即是出度为0的点，遍历也就是相反的顺序</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第7讲-图的基本概念、存储与遍历&quot;&gt;&lt;a href=&quot;#第7讲-图的基本概念、存储与遍历&quot; class=&quot;headerlink&quot; title=&quot;第7讲 图的基本概念、存储与遍历&quot;&gt;&lt;/a&gt;第7讲 图的基本概念、存储与遍历&lt;/h3&gt;&lt;h4 id=&quot;1-图的基本概念&quot;</summary>
      
    
    
    
    <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="acwing" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/"/>
    
    
    <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 第6讲  Huffman编码和Huffman树</title>
    <link href="http://yoursite.com/2021/07/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/sjjg_4_3/"/>
    <id>http://yoursite.com/2021/07/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/sjjg_4_3/</id>
    <published>2021-07-25T16:00:00.000Z</published>
    <updated>2021-08-25T06:30:17.448Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第6讲-Huffman编码和Huffman树"><a href="#第6讲-Huffman编码和Huffman树" class="headerlink" title="第6讲  Huffman编码和Huffman树"></a>第6讲  Huffman编码和Huffman树</h4><h4 id="1-Huffman编码和Huffman树"><a href="#1-Huffman编码和Huffman树" class="headerlink" title="1.Huffman编码和Huffman树"></a>1.Huffman编码和Huffman树</h4><p>(1) Huffman编码<br>    a. 前缀编码: 是指对字符集进行编码时，要求字符集中<strong>任一字符的编码都不是其它字符的编码的前缀</strong>。</p><p>​    </p><p>​    b. 树的带权路径长度(WPL)</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210728153148912.png" alt="image-20210728153148912" loading="lazy"></p><p>​    c. 构造过程</p><blockquote><p>1.所有点的度数必不为1</p><p>2.一定存在一个最优解，权最小的2个点互为兄弟</p><p>最优解 36&lt;58  </p><p>每次取最小的2个合并</p></blockquote><p> <img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210728153909814.png" alt="image-20210728153909814" loading="lazy"></p><p>(2) Huffman树</p><p><a href="https://www.acwing.com/problem/content/150/" target="_blank" rel="noopener">AcWing 148. 合并果子</a></p><p>c++:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <br>    priority_queue&lt;<span class="hljs-keyword">int</span> , <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;,greater&lt;<span class="hljs-keyword">int</span>&gt; &gt; heap ;<span class="hljs-comment">// 小根堆</span><br>    <br>    <span class="hljs-keyword">while</span> (n -- )&#123;<br>        <span class="hljs-keyword">int</span> x;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;x;<br>        heap.push(x);<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(heap.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span>)&#123; <br>        <span class="hljs-keyword">int</span> a =  heap.top();heap.pop(); <span class="hljs-comment">//当前最小值</span><br>        <span class="hljs-keyword">int</span> b =  heap.top();heap.pop(); <span class="hljs-comment">// 当前次小值</span><br>        res += a+b;<br>        heap.push(a+b);<br>        <br>    &#125;<br>    <br>    <span class="hljs-built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>扩展：之前是2进制编码 ，及二叉树</p><p>当为 <strong>K 进制编码</strong> ， K叉树 ，类同二叉树</p><p><strong>每次合并 最小的 K 个数</strong>    </p><p>每次减少k 个数  ，n  &gt;&gt;&gt;  n-(k-1)  最后是否能 (n-1)/(k-1)???     <em>（n点数 k分叉数）</em></p><p>这时候我们在前面补0使其能整除      0不提供代价补任意个都可</p><p>二叉树中因为 k-1 = 1不用考虑</p></blockquote><blockquote><p><a href="https://www.acwing.com/problem/content/151/" target="_blank" rel="noopener">AcWing 149. 荷马史诗</a></p><p>有点难</p></blockquote><h4 id="2-考题：2012-41、2013-4、2014-6、2015-3、2017-6、2018-5、2019-3、2020-42"><a href="#2-考题：2012-41、2013-4、2014-6、2015-3、2017-6、2018-5、2019-3、2020-42" class="headerlink" title="2.考题：2012-41、2013-4、2014-6、2015-3、2017-6、2018-5、2019-3、2020-42"></a>2.考题：2012-41、2013-4、2014-6、2015-3、2017-6、2018-5、2019-3、2020-42</h4><p><strong>2012-41</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210728161258963.png" alt="image-20210728161258963" loading="lazy"></p><blockquote><p>归并 $O(n+m-1)$</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210728161639481.png" alt="image-20210728161639481" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210728161737527.png" alt="image-20210728161737527" loading="lazy"></p><p><strong>2013-4</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210728161822342.png" alt="image-20210728161822342" loading="lazy"></p><blockquote><p>(6-1)/ (3-1) 不能整除 前添加0 </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210728162126981.png" alt="image-20210728162126981" loading="lazy"></p><p>$ (2+3)<em>3 + (4+5)</em>2+ (6+7)*1 = 46$</p><p>$ 5+14+27 = 46$</p></blockquote><p><strong>2014-6</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210728162447688.png" alt="image-20210728162447688" loading="lazy"></p><blockquote><p>D</p></blockquote><p><strong>2015-3</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210728162700250.png" alt="image-20210728162700250" loading="lazy"></p><blockquote><p>D</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210728162921582.png" alt="image-20210728162921582" loading="lazy"></p></blockquote><p><strong>2017-6</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210728163010077.png" alt="image-20210728163010077" loading="lazy"></p><blockquote><p>D</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210728163135924.png" alt="image-20210728163135924" loading="lazy"></p></blockquote><p><strong>2018-5</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210728163220424.png" alt="image-20210728163220424" loading="lazy"></p><blockquote><p>A</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210728163442240.png" alt="image-20210728163442240" loading="lazy"></p></blockquote><p><strong>2019-3</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210728163516141.png" alt="image-20210728163516141" loading="lazy"></p><blockquote><p>C</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210728163650638.png" alt="image-20210728163650638" loading="lazy"></p></blockquote><p><strong>2020-42</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210728163752420.png" alt="image-20210728163752420" loading="lazy"></p><blockquote><ol><li><p>Huffman 树</p></li><li><p>0/1 串到字符串</p><p>从根节点到叶节点每一个0/1表示一个字符，遍历到叶节点后回到根节点</p></li><li><p>判断所以字符是否为叶节点</p></li></ol></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210728164904409.png" alt="image-20210728164904409" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;第6讲-Huffman编码和Huffman树&quot;&gt;&lt;a href=&quot;#第6讲-Huffman编码和Huffman树&quot; class=&quot;headerlink&quot; title=&quot;第6讲  Huffman编码和Huffman树&quot;&gt;&lt;/a&gt;第6讲  Huffman编码和Huff</summary>
      
    
    
    
    <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="acwing" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/"/>
    
    
    <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 第5讲 二叉排序树、表达式树</title>
    <link href="http://yoursite.com/2021/07/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/sjjg_4_2/"/>
    <id>http://yoursite.com/2021/07/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/sjjg_4_2/</id>
    <published>2021-07-18T16:00:00.000Z</published>
    <updated>2021-08-25T06:29:48.773Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第5讲-二叉排序树、表达式树"><a href="#第5讲-二叉排序树、表达式树" class="headerlink" title="第5讲 二叉排序树、表达式树"></a>第5讲 二叉排序树、表达式树</h3><h4 id="1-二叉排序树-BST"><a href="#1-二叉排序树-BST" class="headerlink" title="1.二叉排序树 BST"></a>1.二叉排序树 BST</h4><p>中序遍历有序的二叉树 为 二叉排序树</p><p><a href="https://www.acwing.com/problem/content/3789/" target="_blank" rel="noopener"><strong>AcWing 3786. 二叉排序树</strong></a></p><h4 id="2-平衡树——AVL"><a href="#2-平衡树——AVL" class="headerlink" title="2.平衡树——AVL"></a>2.平衡树——AVL</h4><p>(1) 定义：满足如下条件的树：<br>    a. 是二叉查找树<br>    b. 每个节点的左子树和右子树的高度差最多为1<br>(2) 平衡因子：一个结点的左子树的高度减去右子树的高度，可取-1、0、1三种值<br>(3) 平衡操作</p><blockquote><p>左旋 右旋 不改变中序遍历</p><p><strong>中序遍历不变</strong></p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210727163412049.png" alt="image-20210727163412049" loading="lazy"></p><h4 id="3-表达式树"><a href="#3-表达式树" class="headerlink" title="3.表达式树"></a>3.表达式树</h4><blockquote><p>考的少</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210727164520285.png" alt="image-20210727164520285" loading="lazy"></p><h4 id="4-考题：2011-7、2012-4、2013-3-PDF中的分析有误，以上课讲解为准-、2013-6、2015-4、2018-6、2019-4、2019-6、2020-5、2017-41"><a href="#4-考题：2011-7、2012-4、2013-3-PDF中的分析有误，以上课讲解为准-、2013-6、2015-4、2018-6、2019-4、2019-6、2020-5、2017-41" class="headerlink" title="4.考题：2011-7、2012-4、2013-3(PDF中的分析有误，以上课讲解为准)、2013-6、2015-4、2018-6、2019-4、2019-6、2020-5、2017-41"></a>4.考题：2011-7、2012-4、2013-3(PDF中的分析有误，以上课讲解为准)、2013-6、2015-4、2018-6、2019-4、2019-6、2020-5、2017-41</h4><p><strong>2011-7</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210727164907499.png" alt="image-20210727164907499" loading="lazy"></p><blockquote><p>A</p><p><strong>判断中序遍历是否有序</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210727165303010.png" alt="image-20210727165303010" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210727165130394.png" alt="image-20210727165130394" loading="lazy"></p></blockquote><p><strong>2012-4</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210727165415989.png" alt="image-20210727165415989" loading="lazy"></p><blockquote><p>B</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210727165720445.png" alt="image-20210727165720445" loading="lazy"></p></blockquote><p><strong>2013-3</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210727163607794.png" alt="image-20210727163607794" loading="lazy"></p><blockquote><p>D    左旋 右旋 不改变中序遍历</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210727164002437.png" alt="image-20210727164002437" loading="lazy"></p></blockquote><p><strong>2013-6</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210727165759234.png" alt="image-20210727165759234" loading="lazy"></p><blockquote><p>C</p><p>删除一个节点后又添加这个节点，树会不会不同</p><p>为叶节点： 相同</p><p>不为叶节点：</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210727170031782.png" alt="image-20210727170031782" loading="lazy"></p></blockquote><p><strong>2015-4</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210727170408836.png" alt="image-20210727170408836" loading="lazy"></p><blockquote><p>D</p><p>AVL 树 中序遍历为降序</p><p>左子树一定大于此元素</p><p>最大元素一定无左子树</p></blockquote><p><strong>2018-6</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210727170610360.png" alt="image-20210727170610360" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210727170617758.png" alt="image-20210727170617758" loading="lazy"></p><blockquote><p>C </p></blockquote><p><strong>2019-4</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210727170743812.png" alt="image-20210727170743812" loading="lazy"></p><blockquote><p>A</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210727170958283.png" alt="image-20210727170958283" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210727171144035.png" alt="image-20210727171144035" loading="lazy"></p></blockquote><p><strong>2019-6</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210727164634164.png" alt="image-20210727164634164" loading="lazy"></p><blockquote><p>A</p><p>表达式树的化简 </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210727164716317.png" alt="image-20210727164716317" loading="lazy"></p><p>到</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210727164737507.png" alt="image-20210727164737507" loading="lazy"></p></blockquote><p><strong>2020-5</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210727171222387.png" alt="image-20210727171222387" loading="lazy"></p><p><strong>2017-41</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210727171446721.png" alt="image-20210727171446721" loading="lazy"></p><blockquote><p><a href="https://www.acwing.com/problem/content/3768/" target="_blank" rel="noopener"><strong>AcWing 3765. 表达式树</strong></a>  </p></blockquote><p>C++：  $O(n^2)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     string val；</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <br>    <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode* root)</span></span>&#123;<br>        <br>        <br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> <span class="hljs-string">""</span> ;<span class="hljs-comment">// 节点为空</span><br>        <span class="hljs-keyword">if</span>(!root-&gt;left&amp;&amp;!root-&gt;right) <span class="hljs-keyword">return</span> root-&gt;val;  <span class="hljs-comment">// 叶节点 </span><br>        <span class="hljs-keyword">else</span> &#123;<br>            <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"("</span> + dfs(root-&gt;left) + root-&gt;val + dfs(root-&gt;right) + <span class="hljs-string">")"</span>;<br>            <br>        &#125;<br>        <br>        <br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">expressionTree</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <br>        <span class="hljs-comment">// 最外层不要括号</span><br>        <br>        <span class="hljs-keyword">return</span> dfs(root-&gt;left ) + root-&gt;val + dfs(root-&gt;right);<br>        <br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210727172012391.png" alt="image-20210727172012391" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第5讲-二叉排序树、表达式树&quot;&gt;&lt;a href=&quot;#第5讲-二叉排序树、表达式树&quot; class=&quot;headerlink&quot; title=&quot;第5讲 二叉排序树、表达式树&quot;&gt;&lt;/a&gt;第5讲 二叉排序树、表达式树&lt;/h3&gt;&lt;h4 id=&quot;1-二叉排序树-BST&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="acwing" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/"/>
    
    
    <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 第四讲 树的基本概念、二叉树、树和森林</title>
    <link href="http://yoursite.com/2021/07/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/sjjg_4_1/"/>
    <id>http://yoursite.com/2021/07/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/sjjg_4_1/</id>
    <published>2021-07-17T16:00:00.000Z</published>
    <updated>2021-08-25T06:29:13.723Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第四讲-树的基本概念、二叉树、树和森林"><a href="#第四讲-树的基本概念、二叉树、树和森林" class="headerlink" title="第四讲 树的基本概念、二叉树、树和森林"></a>第四讲 树的基本概念、二叉树、树和森林</h3><h4 id="1-树的基本概念"><a href="#1-树的基本概念" class="headerlink" title="1. 树的基本概念"></a>1. 树的基本概念</h4><p>(1) 树是由根节点和若干颗子树构成的。树是由一个集合以及在该集合上定义的一种关系构成的。集合中的元素称为树的节点，所定义的关系称为父子关系。父子关系在树的节点之间建立了一个层次结构。在这种层次结构中有一个节点具有特殊的地位，这个节点称为该树的根节点，或称为树根。<br>(2) 空集合也是树，称为空树。空树中没有节点；<br>(3) 孩子节点或子节点：一个节点含有的子树的根节点称为该节点的子节点；<br>(4) 节点的度：一个节点含有的子节点的个数称为该节点的度；<br>(5) 叶节点或终端节点：度为0的节点称为叶节点；<br>(6) 非终端节点或分支节点：度不为0的节点；<br>(7) 双亲节点或父节点：若一个节点含有子节点，则这个节点称为其子节点的父节点；<br>(8) 兄弟节点：具有相同父节点的节点互称为兄弟节点；<br>(9) 树的度：一棵树中，最大的节点的度称为树的度；<br>(10) 节点的层次：从根开始定义起，根为第1层，根的子节点为第2层，以此类推；<br>(11) 树的高度或深度：树中节点的最大层次；<br>(12) 节点的祖先：从根到该节点所经分支上的所有节点；<br>(13) 子孙：以某节点为根的子树中任一节点都称为该节点的子孙；<br>(14) 森林：由棵互不相交的树的集合称为森林。</p><blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210716201142018.png" alt="image-20210716201142018" loading="lazy"></p><p>理解理解理解</p></blockquote><h4 id="2-二叉树"><a href="#2-二叉树" class="headerlink" title="2. 二叉树"></a>2. 二叉树</h4><p>(1) 二叉树的定义及其主要特征<br>    a. 二叉树的基本形态：空二叉树、单节点二叉树、左子树、右子树</p><p>​    b. 性质：</p><p>​    [1] 在非空二叉树中，第i层上至多有2^(i-1) 个结点。<br>​    [2] 深度为k的二叉树至多有2^k - 1个结点<br>​    [3] 对任何一颗二叉树，若其叶子结点数为n0，度为2的结点数为n2，则n0 = n2 + 1。<br>​    [4] n个结点的完全二叉树深度为：log2(n)向下取整 + 1<br>​    [5] 二叉树的堆式存储: 节点p (编号p)的左儿子：2p，右儿子：2p+1<br>​<br>​        //  r = [p/2]下取整</p><p>​    c. 两种特殊的二叉树<br>​        [1] 满二叉树：一颗深度为k且有2^k-1个结点的二叉树<br>​        [2] 如果深度为k,有n个结点的二叉树，当且仅当其每个结点都与深度为k的满二叉树中编号从1到n的结点一一对应，该二叉树称为完全二叉树</p><p>(2) 二叉树的顺序存储结构和链式存储结构</p><p>​    链式存储结构<br>​    /**c++:<br>​     * Definition for a binary tree node.<br>​     * struct TreeNode {<br>​     *     int val;<br>​     *     TreeNode *left;<br>​     *     TreeNode *right;<br>​     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}<br>​     * };<br>​     */<br>​     </p><p>(3) 二叉树的遍历<br>    a. 前序遍历  dfs<br>    b. 中序遍历<br>    c. 后序遍历<br>    d. 根据前序 + 中序重建二叉树 (AcWing 18. 重建二叉树)<br>    层次遍历不考 bfs </p><p>​        </p><p>(4) 线索二叉树的基本概念和构造<br>​        对二叉树节点的指针域做如下规定：<br>​            a. 若节点有左孩子，则Lchild指向左孩子，否则指向直接前驱；右孩子同理；<br>​            b. 增加两个标志域，Ltag表示指向的是子节点还是前驱；Rtag同理<br>​            c. 指向前驱和后继的指针叫做线索。按照某种次序遍历，加上线索的二叉树称之为线索二叉树</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210716203738956.png" alt="image-20210716203738956" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210716203854415.png" alt="image-20210716203854415" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210716204207520.png" alt="image-20210716204207520" loading="lazy"></p><blockquote><p><strong>n  = n0 + n1 + n2</strong></p><p>n-1边</p><p><strong>n-1 = 0<em>n0 + 1 * n1 + 2</em>n 2</strong></p><p>n0 + n1 + n2 - 1 == 0<em>n0 + 1 * n1 + 2</em>n 2</p><p>n0  - 1 ==   n 2</p><p><strong>n0 = n2 + 1</strong> </p><p>1 </p><p>前序+中序 —&gt;&gt; 构造二叉树</p></blockquote><h4 id="3-树、森林"><a href="#3-树、森林" class="headerlink" title="3. 树、森林"></a>3. 树、森林</h4><p>(1) 树的存储结构<br>    a. 只存父节点<br>    b. 邻接表存储所有子节点<br>    c. 左儿子右兄弟<br>(2) <strong>森林F</strong>与<strong>二叉树T</strong>的转换<br>    a. <strong>原树中叶子节点数 = 转换后的树中有右儿子的节点数 + 1</strong><br>    b. <strong>F的前序遍历</strong>就是<strong>T的前序遍历</strong><br>    c. <strong>F的后序遍历</strong>就是<strong>T的中序遍历</strong><br>(3) 树和森林的遍历<br>    a. 前序遍历<br>    b. 后序遍历</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210716213705277.png" alt="image-20210716213705277" loading="lazy"></p><h4 id="4-考题：2011-4、2011-5、2011-6、2012-3、2013-5、2014-4、2014-5、2014-41、2015-2、2016-5、2016-42、2017-4、2017-5、2018-4、2019-2、2020-3、2020-4"><a href="#4-考题：2011-4、2011-5、2011-6、2012-3、2013-5、2014-4、2014-5、2014-41、2015-2、2016-5、2016-42、2017-4、2017-5、2018-4、2019-2、2020-3、2020-4" class="headerlink" title="4. 考题：2011-4、2011-5、2011-6、2012-3、2013-5、2014-4、2014-5、2014-41、2015-2、2016-5、2016-42、2017-4、2017-5、2018-4、2019-2、2020-3、2020-4"></a>4. 考题：2011-4、2011-5、2011-6、2012-3、2013-5、2014-4、2014-5、2014-41、2015-2、2016-5、2016-42、2017-4、2017-5、2018-4、2019-2、2020-3、2020-4</h4><p><strong>2011-4</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210717135246087.png" alt="image-20210717135246087" loading="lazy"></p><blockquote><p>分析：求叶节点 n0 </p><p>768 = n0+n1+n2</p><p>n0 = n2+1 ;</p><p>2*n2 +1 + n1 = 768</p><p>768 为偶数 n1 =1 ，多一个</p><p>2*n2 = 766</p><p>n2 = 383</p><p>n0 = n2+ 1 = 384 ;</p></blockquote><p><strong>2011-5</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210717135737523.png" alt="image-20210717135737523" loading="lazy"></p><blockquote><p>前序和后序遍历 不能唯一确定 树</p><p>选择题 可以用 前序和 中序来判断</p></blockquote><p><strong>2011-6</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210718164805299.png" alt="image-20210718164805299" loading="lazy"></p><blockquote><p>用结论 :  <strong>原树中叶子节点数 = 转换后的树中有右儿子的节点数 + 1</strong>  </p><p>树中有右儿子的节点数   116 == 115 + 1 </p><p>2011 - 115 = 1896</p></blockquote><p><strong>2012-3</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210718165530244.png" alt="image-20210718165530244" loading="lazy"></p><blockquote><p>A</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210718165949376.png" alt="image-20210718165949376" loading="lazy"></p></blockquote><p><strong>2013-5</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210718170017054.png" alt="image-20210718170017054" loading="lazy"></p><blockquote><p>A</p><p><strong>后序线索二叉树</strong>：看<strong>后序遍历</strong> </p><p>线索二叉树：若节点有左孩子，则Lchild指向左孩子，否则指向直接前驱；右孩子同理</p><p>X 有 左兄弟 ，为叶节点 没有孩子</p><p>指向直接前驱 x 的父节点     yxp </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210718170548173.png" alt="image-20210718170548173" loading="lazy"></p></blockquote><p><strong>2014-4</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210718170726674.png" alt="image-20210718170726674" loading="lazy"></p><blockquote><p>中序线索化：看中序遍历</p><p>debxac</p><p>选D</p></blockquote><p><strong>2014-5</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210718170914309.png" alt="image-20210718170914309" loading="lazy"></p><blockquote><p>森林&gt;&gt;二叉树  左儿子 右兄弟</p><p>兄弟 == 儿子？ yes</p><p>叶节点： 没有孩子</p><p>所以为没有左孩子的</p><p>选C</p></blockquote><p><strong>2014-41</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210718171711486.png" alt="image-20210718171711486" loading="lazy"></p><blockquote><p>带权路径  ： 权值* 到根节点的距离</p><p><a href="https://www.acwing.com/problem/content/3769/" target="_blank" rel="noopener"><strong>AcWing 3766. 二叉树的带权路径长度</strong></a>    </p><p>树的遍历 ， 推荐dfs实现 即递归</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210718172227150.png" alt="image-20210718172227150" loading="lazy"></p></blockquote><p>C++:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode* root,<span class="hljs-keyword">int</span> depth)</span></span>&#123;  <span class="hljs-comment">// depth 为深度</span><br>     <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <span class="hljs-comment">//如果是空</span><br>     <span class="hljs-comment">// 如果是叶节点: 没有左右孩子</span><br>     <span class="hljs-keyword">if</span>(!root-&gt;left&amp;&amp;!root-&gt;right) <span class="hljs-keyword">return</span> root-&gt;val*depth; <br>     <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-comment">// 左右遍历 返回左右子树权值</span><br>         <span class="hljs-keyword">return</span> dfs(root-&gt;left,depth+<span class="hljs-number">1</span>)+ dfs(root-&gt;right,depth+<span class="hljs-number">1</span>);<br>         <br>     &#125;<br>     <br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pathSum</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <br>        <span class="hljs-keyword">return</span> dfs(root , <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>c:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     struct TreeNode *left;</span><br><span class="hljs-comment"> *     struct TreeNode *right;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(struct TreeNode* root,<span class="hljs-keyword">int</span> depth)</span></span>&#123;<br>    <br>    <span class="hljs-keyword">if</span>(!root ) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(!root-&gt;left&amp;&amp;!root-&gt;right) <span class="hljs-keyword">return</span> root-&gt;val*depth;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <br>        <span class="hljs-keyword">return</span> dfs(root-&gt;left,depth+<span class="hljs-number">1</span>)+ dfs(root-&gt;right,depth+<span class="hljs-number">1</span>);<br>        <br>    &#125;<br>    <br>&#125; <br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pathSum</span><span class="hljs-params">(struct TreeNode* root)</span> </span>&#123;<br>    <br>    <br><span class="hljs-keyword">return</span> dfs(root , <span class="hljs-number">0</span>);<br><br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2015-2</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210718194045253.png" alt="image-20210718194045253" loading="lazy"></p><blockquote><p> 包含4个点的二叉树数量</p><p> N 卡特兰数</p><p> <img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210726210106380.png" alt="image-20210726210106380" loading="lazy"></p></blockquote><p><strong>2016-5</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210718194140386.png" alt="image-20210718194140386" loading="lazy"></p><blockquote><p>25个结点 24条边</p><p>每删一条边多一颗树 </p><p>删了24 - 15 = 9 棵</p><p>9+1 = 10 棵</p></blockquote><p><strong>2016-42</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210718194216798.png" alt="image-20210718194216798" loading="lazy"></p><blockquote><p>1.</p><p>归纳法：</p><p>n  =  nk+ n0</p><p>e  = k* nk</p><p>e  =  n - 1</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210726211221536.png" alt="image-20210726211221536" loading="lazy"></p><p>2.</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210726211338689.png" alt="image-20210726211338689" loading="lazy"></p><p>最多为满二叉树</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210726211528316.png" alt="" loading="lazy"></p></blockquote><p><strong>2017-4</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210726211558663.png" alt="image-20210726211558663" loading="lazy"></p><blockquote><p>B</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210726211658422.png" alt="image-20210726211658422" loading="lazy"></p></blockquote><p><strong>2017-5</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210726211724679.png" alt="image-20210726211724679" loading="lazy"></p><blockquote><p>B</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210726211824779.png" alt="image-20210726211824779" loading="lazy"></p></blockquote><p><strong>2018-4</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210726211910620.png" alt="image-20210726211910620" loading="lazy"></p><blockquote><p>满二叉树</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210726212632926.png" alt="image-20210726212632926" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210726212650654.png" alt="image-20210726212650654" loading="lazy"></p></blockquote><p><strong>2019-2</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210726211931557.png" alt="image-20210726211931557" loading="lazy"></p><blockquote><p>B</p></blockquote><p><strong>2020-3</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210726211951141.png" alt="image-20210726211951141" loading="lazy"></p><blockquote><p>要存下任意一棵树，最坏情况</p><p>1+2 +4 +8 +16 = 31</p><p>2^5-1 = 31 </p></blockquote><p><strong>2020-4</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210726213032648.png" alt="image-20210726213032648" loading="lazy"></p><blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210726213120328.png" alt="image-20210726213120328" loading="lazy"></p></blockquote><h4 id="5-押题：AcWing-19"><a href="#5-押题：AcWing-19" class="headerlink" title="5. 押题：AcWing 19"></a>5. 押题：AcWing 19</h4><p><a href="">AcWing 19 二叉树的下一个节点</a></p><blockquote><p>线索二叉树。</p><p>算法<br>(模拟) O(h)O(h)<br>这道题目就是让我们求二叉树中给定节点的后继。</p><p>分情况讨论即可，如下图所示：</p><p>1.如果当前节点有右儿子，则右子树中最左侧的节点就是当前节点的后继。比如F的后继是H；<br>2.如果当前节点没有右儿子，则需要沿着father域一直向上找，找到第一个是其father左儿子的节点，该节点的father就是当前节点的后继。比如当前节点是D，则第一个满足是其father左儿子的节点是F，则C的father就是D的后继，即F是D的后继。</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210726215002976.png" alt="image-20210726215002976" loading="lazy"></p></blockquote><p>c++:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode *father;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL), father(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">inorderSuccessor</span><span class="hljs-params">(TreeNode* p)</span> </span>&#123;<br>        <span class="hljs-comment">// 1.如果当前节点有右儿子，则右子树中最左侧的节点就是当前节点的后继</span><br>        <span class="hljs-keyword">if</span>(p-&gt;right) &#123;<br>            p= p-&gt;right ;<br>            <span class="hljs-keyword">while</span>(p-&gt;left ) p=p-&gt;left;<br>            <span class="hljs-keyword">return</span> p;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 2. 如果当前节点没有右儿子，则需要沿着father域一直向上找，找到第一个是其father左儿子的节点，该节点的father就是当前节点的后继。</span><br>        <span class="hljs-keyword">while</span>(p-&gt;father&amp;&amp; p == p-&gt;father-&gt;right) p = p-&gt;father;<br>        <span class="hljs-keyword">return</span> p-&gt;father;<br>        <br>        <br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第四讲-树的基本概念、二叉树、树和森林&quot;&gt;&lt;a href=&quot;#第四讲-树的基本概念、二叉树、树和森林&quot; class=&quot;headerlink&quot; title=&quot;第四讲 树的基本概念、二叉树、树和森林&quot;&gt;&lt;/a&gt;第四讲 树的基本概念、二叉树、树和森林&lt;/h3&gt;&lt;h4 i</summary>
      
    
    
    
    <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="acwing" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/"/>
    
    
    <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 第三讲 栈与队列</title>
    <link href="http://yoursite.com/2021/07/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/sjjg_3/"/>
    <id>http://yoursite.com/2021/07/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/sjjg_3/</id>
    <published>2021-07-10T16:00:00.000Z</published>
    <updated>2021-08-25T06:28:40.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第三讲-栈与队列"><a href="#第三讲-栈与队列" class="headerlink" title="第三讲 栈与队列"></a>第三讲 栈与队列</h3><blockquote><p>理解！理解！理解！</p><p>记得看清楚 <strong>题目条件</strong></p></blockquote><h4 id="1-栈和队列的基本概念"><a href="#1-栈和队列的基本概念" class="headerlink" title="1. 栈和队列的基本概念"></a>1. 栈和队列的基本概念</h4><h4 id="2-栈和队列的顺序存储结构"><a href="#2-栈和队列的顺序存储结构" class="headerlink" title="2. 栈和队列的顺序存储结构"></a>2. 栈和队列的顺序存储结构</h4><blockquote><p>lj 理解为主，用猪头打游戏的男人，hhhh</p></blockquote><pre><code>(1) 栈：栈顶元素位置：指向最后一个元素、指向最后一个元素的下一个位置    stk[N]    指向最后一个元素  // top = -1    // 添加    stk[++top] = 1;    // 删除    top--;    //栈顶    stk[top]    指向最后一个元素的下一个位置 // top = 0;    // 添加    stk[top++] = 1;    // 删除    top--;    // 返回栈顶    stk[top-1]    // 判断是否为空    top == 0  // top==初始值(2) 队列：一般采用 循环队列 。    (a) 队头元素位置：指向第一个元素、指向第一个元素的前一个位置。    (b) 队尾元素位置：指向队尾元素、指向队尾元素的下一个位置。    p[N]    // front rear    1.front=0 第一个元素，rear=0 最后一个元素的下一个元素    // 判空     front == rear    // 队满    front = (rear+1)%N    // 插入     q[rear++] = 1;    rear %= N    // 弹出    front = (front + 1 )%N;    // 弹出队头    q[front]</code></pre><p>​        </p><pre><code>2.front 第一个元素，rear=-1 最后一个元素// 判空 front == (rear+1)%N;// 队满front = (rear+2)%N// 插入 q[++rear] = 1;rear %= N// 弹出front = (front + 1 )%N;// 弹出队头q[front]</code></pre><p>​<br>​<br>​<br>​        </p><h4 id="3-栈和队列的链式存储结构"><a href="#3-栈和队列的链式存储结构" class="headerlink" title="3. 栈和队列的链式存储结构"></a>3. 栈和队列的链式存储结构</h4><p><strong>栈</strong></p><blockquote><p>头插 和 头删</p><p>top指向第一个元素</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710112328076.png" alt="image-20210710112328076" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210711221927834.png" alt="image-20210711221927834" loading="lazy"></p><p><strong>队列</strong></p><blockquote><p>front 第一个元素</p><p>rear 最后一个元素的下一个元素</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710113728170.png" alt="image-20210710113728170" loading="lazy"></p><h4 id="4-栈和队列的应用"><a href="#4-栈和队列的应用" class="headerlink" title="4. 栈和队列的应用"></a>4. 栈和队列的应用</h4><p><strong>(1) 栈的应用：表达式求值（中缀表达式转后缀表达式、括号匹配）、DFS</strong></p><pre><code>DFS // 套娃？？ 画树图来理解 计算机用栈来维护  深搜不撞南墙不回头</code></pre><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710114909193.png" alt="image-20210710114909193" loading="lazy"></p><p><strong>表达式求值（中缀表达式转后缀表达式、括号匹配）</strong></p><blockquote><p>重要！！！！！！ 必考。</p><p>理解背，模板题</p><h2 id="AcWing-3302-表达式求值"><a href="#AcWing-3302-表达式求值" class="headerlink" title="AcWing 3302. 表达式求值"></a><a href="https://www.acwing.com/problem/content/3305/" target="_blank" rel="noopener">AcWing 3302. 表达式求值</a></h2><p>笔试要求：</p><p>过程，选择题经常考</p><p>往年并没考大题，今年可能。</p><p>一个栈存符号（ +-*/  加减符号优先级）</p><p>一个栈存数字</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710120238390.png" alt="image-20210710120238390" loading="lazy"></p><p><strong>王道书解法：</strong></p><blockquote><p>王道P91-92 11题</p><p>双栈：运算符栈和操作数栈<br>那么操作符优先级怎么定义呢？<br>优先级分为<strong>栈内优先级（in stack priority）isp</strong> 和 <strong>栈外优先级（in coming priority）icp</strong><br>isp[op]表示该操作符op在栈内的优先数, icp[op]表示该操作符op在栈外的优先数,</p><p>对于isp和icp可以用一个map存储 char 到 int 的映射</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710122637351.png" alt="image-20210710122637351" loading="lazy"></p><p><strong>ps：a+b-a*((c+d)/e-f)+g</strong>：</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710122842214.png" alt="image-20210710122842214" loading="lazy"></p></blockquote><p><strong>按照王道书写：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">char</span>, <span class="hljs-keyword">int</span>&gt; isp, icp;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> opers[<span class="hljs-number">6</span>] = &#123;<span class="hljs-string">'+'</span>, <span class="hljs-string">'-'</span>, <span class="hljs-string">'*'</span>, <span class="hljs-string">'/'</span>, <span class="hljs-string">'('</span>, <span class="hljs-string">')'</span>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> isps[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>&#125;, icps[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) isp[opers[i]] = isps[i], icp[opers[i]] = icps[i];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">char</span>&gt;&amp; ops, <span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> b = nums.top(); nums.pop();<br>    <span class="hljs-keyword">int</span> a = nums.top(); nums.pop();<br>    <span class="hljs-keyword">char</span> op = ops.top(); ops.pop();<br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-keyword">if</span>(op == <span class="hljs-string">'+'</span>) t = a + b;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-string">'-'</span>) t = a - b;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-string">'*'</span>) t = a * b;<br>    <span class="hljs-keyword">else</span> t = a / b;<br>    nums.push(t);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>&#123;<br>    s = <span class="hljs-string">"("</span> + s + <span class="hljs-string">")"</span>;<br>    <span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">char</span>&gt; ops;<br>    <span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt;  nums;<br>    <span class="hljs-keyword">int</span> n = s.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">'0'</span> &lt;= s[i] &amp;&amp; s[i] &lt;= <span class="hljs-string">'9'</span>) &#123;<br>            <span class="hljs-keyword">int</span> t = s[i] - <span class="hljs-string">'0'</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; ++j) &#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-string">'0'</span> &lt;= s[j] &amp;&amp; s[j] &lt;= <span class="hljs-string">'9'</span>) t = t * <span class="hljs-number">10</span> + (s[j] - <span class="hljs-string">'0'</span>);<br>                <span class="hljs-keyword">else</span> &#123;<br>                    i = j - <span class="hljs-number">1</span>;<br>                    nums.push(t);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">' '</span>) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span>(ops.empty() || isp[ops.top()] &lt; icp[s[i]]) ops.push(s[i]);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(isp[ops.top()] == icp[s[i]]) ops.pop();<br>            <span class="hljs-keyword">else</span> &#123;<br>                calc(ops, nums);<br>                i--;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> nums.top();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    init();<br>    <span class="hljs-built_in">string</span> s;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; s;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; calculate(s);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>表达式求值，推荐</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">char</span>&gt; op;<br><span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; num;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> b = num.top(); num.pop();<br>    <span class="hljs-keyword">auto</span> a = num.top(); num.pop();<br>    <span class="hljs-keyword">auto</span> c = op.top(); op.pop();<br><br>    <span class="hljs-keyword">int</span> x;<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-string">'+'</span>) x = a + b;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == <span class="hljs-string">'-'</span>) x = a - b;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == <span class="hljs-string">'*'</span>) x = a * b;<br>    <span class="hljs-keyword">else</span> x = a / b;<br>    num.push(x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">string</span> s;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; s;<br><br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">char</span>, <span class="hljs-keyword">int</span>&gt; pr&#123;&#123;<span class="hljs-string">'+'</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">'-'</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">'*'</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-string">'/'</span>, <span class="hljs-number">2</span>&#125;&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isdigit</span>(s[i]))<br>        &#123;<br>            <span class="hljs-keyword">int</span> j = i, x = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (j &lt; s.<span class="hljs-built_in">size</span>() &amp;&amp; <span class="hljs-built_in">isdigit</span>(s[j]))<br>                x = x * <span class="hljs-number">10</span> + s[j ++ ] - <span class="hljs-string">'0'</span>;<br>            num.push(x);<br>            i = j - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">'('</span>) op.push(s[i]);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">')'</span>)<br>        &#123;<br>            <span class="hljs-keyword">while</span> (op.top() != <span class="hljs-string">'('</span>) eval();<br>            op.pop();<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">while</span> (op.<span class="hljs-built_in">size</span>() &amp;&amp; op.top() != <span class="hljs-string">'('</span> &amp;&amp; pr[op.top()] &gt;= pr[s[i]])<br>                eval();<br>            op.push(s[i]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (op.<span class="hljs-built_in">size</span>()) eval();<br>    <span class="hljs-built_in">cout</span> &lt;&lt; num.top() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>中缀表达式转后缀表达式</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">char</span>&gt; op;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> c = op.top(); op.pop();<br>    <span class="hljs-built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="hljs-string">' '</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">string</span> s;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; s;<br><br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">char</span>, <span class="hljs-keyword">int</span>&gt; pr&#123;&#123;<span class="hljs-string">'+'</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">'-'</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">'*'</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-string">'/'</span>, <span class="hljs-number">2</span>&#125;&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isdigit</span>(s[i]))<br>        &#123;<br>            <span class="hljs-keyword">int</span> j = i, x = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (j &lt; s.<span class="hljs-built_in">size</span>() &amp;&amp; <span class="hljs-built_in">isdigit</span>(s[j]))<br>                x = x * <span class="hljs-number">10</span> + s[j ++ ] - <span class="hljs-string">'0'</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">' '</span>;<br>            i = j - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">'('</span>) op.push(s[i]);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">')'</span>)<br>        &#123;<br>            <span class="hljs-keyword">while</span> (op.top() != <span class="hljs-string">'('</span>) eval();<br>            op.pop();<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">while</span> (op.<span class="hljs-built_in">size</span>() &amp;&amp; op.top() != <span class="hljs-string">'('</span> &amp;&amp; pr[op.top()] &gt;= pr[s[i]])<br>                eval();<br>            op.push(s[i]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (op.<span class="hljs-built_in">size</span>()) eval();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>(2) 队列的应用：BFS</strong></p><blockquote><p>宽搜   层次遍历</p></blockquote><h4 id="5-考题：2011-2、2011-3、2012-2、2013-2、2014-2、2014-3、2015-1、2016-3、2017-2、2018-1、2018-2、2019-42、2020-2"><a href="#5-考题：2011-2、2011-3、2012-2、2013-2、2014-2、2014-3、2015-1、2016-3、2017-2、2018-1、2018-2、2019-42、2020-2" class="headerlink" title="5. 考题：2011-2、2011-3、2012-2、2013-2、2014-2、2014-3、2015-1、2016-3、2017-2、2018-1、2018-2、2019-42、2020-2"></a>5. 考题：2011-2、2011-3、2012-2、2013-2、2014-2、2014-3、2015-1、2016-3、2017-2、2018-1、2018-2、2019-42、2020-2</h4><p><strong>2011-2</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710155710532.png" alt="image-20210710155710532" loading="lazy"></p><blockquote><p>栈： a b c d  </p><p>d e c b a</p><p>d c  e b a</p><p>d c b e a</p><p>d c b a e </p><p>4种</p></blockquote><p><strong>2011-3</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710155727855.png" alt="image-20210710155727855" loading="lazy"></p><blockquote><p>循环队列</p><p>rear 添加一个元素后移一个 当n-1时添加一个元素 才会到 0 A[0]</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710160938339.png" alt="image-20210710160938339" loading="lazy"></p><p><strong>2012-2</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710155749687.png" alt="image-20210710155749687" loading="lazy"></p><blockquote><p>A</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710122842214.png" alt="image-20210710122842219" loading="lazy"></p></blockquote><p><strong>2013-2</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710155806016.png" alt="image-20210710155806016" loading="lazy"></p><blockquote><p>B</p></blockquote><p><strong>2014-2</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710155820207.png" alt="image-20210710155820207" loading="lazy"></p><blockquote><p>B</p></blockquote><p><strong>2014-3</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710155828999.png" alt="image-20210710155828999" loading="lazy"></p><blockquote><p>A</p></blockquote><p><strong>2015-1</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710155936385.png" alt="image-20210710155936385" loading="lazy"></p><blockquote><p>A</p></blockquote><p><strong>2016-3</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710155954641.png" alt="image-20210710155954641" loading="lazy"></p><blockquote><p>C</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710164603717.png" alt="image-20210710164603717" loading="lazy"></p></blockquote><p><strong>2017-2</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710160019021.png" alt="image-20210710160019021" loading="lazy"></p><blockquote><p>1.尾递归可以不用栈</p><p>C</p></blockquote><p><strong>2018-1</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710160034552.png" alt="image-20210710160034552" loading="lazy"></p><blockquote><p>B</p></blockquote><p><strong>2018-2</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710160046832.png" alt="image-20210710160046832" loading="lazy"></p><blockquote><p>C    模拟即可</p><p>队列 Q 123456</p><p>栈 </p><p>队列输出 ，队列输出压栈，栈输出</p></blockquote><p><strong>2019-42</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710160111572.png" alt="image-20210710160111572" loading="lazy"></p><blockquote><p>设计一个循环队列 ， O(1)时间只能使用链式</p><p>但<strong>不用代码</strong>，只写设计思想即可</p><p>front 对头，rear 最后一个下一个元素</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710170252466.png" alt="image-20210710170252466" loading="lazy"></p><blockquote><p>(3)画出第一个元素入队后的队列状态。</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710170447918.png" alt="image-20210710170447918" loading="lazy"></p><blockquote><p>(4)给出入队操作和出队操作的基本过程。</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710170922595.png" alt="image-20210710170922595" loading="lazy"></p><p><strong>2020-2</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210710160206948.png" alt="image-20210710160206948" loading="lazy"></p><h4 id="6-押题：AcWing-3302"><a href="#6-押题：AcWing-3302" class="headerlink" title="6. 押题：AcWing 3302"></a>6. 押题：AcWing 3302</h4><p><a href="https://www.acwing.com/problem/content/3305/" target="_blank" rel="noopener"><strong>AcWing 3302</strong></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第三讲-栈与队列&quot;&gt;&lt;a href=&quot;#第三讲-栈与队列&quot; class=&quot;headerlink&quot; title=&quot;第三讲 栈与队列&quot;&gt;&lt;/a&gt;第三讲 栈与队列&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;理解！理解！理解！&lt;/p&gt;
&lt;p&gt;记得看清楚 &lt;strong&gt;题目</summary>
      
    
    
    
    <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="acwing" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/"/>
    
    
    <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 第二讲 线性表</title>
    <link href="http://yoursite.com/2021/07/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/sjjg_2/"/>
    <id>http://yoursite.com/2021/07/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/sjjg_2/</id>
    <published>2021-07-09T16:00:00.000Z</published>
    <updated>2021-08-25T06:28:37.223Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第二讲-线性表"><a href="#第二讲-线性表" class="headerlink" title="第二讲 线性表"></a>第二讲 线性表</h3><h4 id="1-将具有线性关系的数据存储到计算机中所使用的存储结构称为线性表。"><a href="#1-将具有线性关系的数据存储到计算机中所使用的存储结构称为线性表。" class="headerlink" title="1. 将具有线性关系的数据存储到计算机中所使用的存储结构称为线性表。"></a>1. 将具有线性关系的数据存储到计算机中所使用的存储结构称为线性表。</h4><h4 id="2-对于线性表中的数据来说，位于当前数据之前的数据统称为“前趋元素”，前边紧挨着的数据称为“直接前趋”；同样，后边的数据统称为“后继元素”，后边紧挨着的数据称为“直接后继”。"><a href="#2-对于线性表中的数据来说，位于当前数据之前的数据统称为“前趋元素”，前边紧挨着的数据称为“直接前趋”；同样，后边的数据统称为“后继元素”，后边紧挨着的数据称为“直接后继”。" class="headerlink" title="2. 对于线性表中的数据来说，位于当前数据之前的数据统称为“前趋元素”，前边紧挨着的数据称为“直接前趋”；同样，后边的数据统称为“后继元素”，后边紧挨着的数据称为“直接后继”。"></a>2. 对于线性表中的数据来说，位于当前数据之前的数据统称为“前趋元素”，前边紧挨着的数据称为“直接前趋”；同样，后边的数据统称为“后继元素”，后边紧挨着的数据称为“直接后继”。</h4><h4 id="3-线性表的分类"><a href="#3-线性表的分类" class="headerlink" title="3. 线性表的分类"></a>3. 线性表的分类</h4><h5 id="1-数据元素在内存中集中存储，采用顺序表示结构，简称“顺序存储”；"><a href="#1-数据元素在内存中集中存储，采用顺序表示结构，简称“顺序存储”；" class="headerlink" title="(1) 数据元素在内存中集中存储，采用顺序表示结构，简称“顺序存储”；"></a>(1) 数据元素在内存中集中存储，采用顺序表示结构，简称“顺序存储”；</h5><pre><code>例如：数组</code></pre><h5 id="2-数据元素在内存中分散存储，采用链式表示结构，简称“链式存储”。"><a href="#2-数据元素在内存中分散存储，采用链式表示结构，简称“链式存储”。" class="headerlink" title="(2) 数据元素在内存中分散存储，采用链式表示结构，简称“链式存储”。"></a>(2) 数据元素在内存中分散存储，采用链式表示结构，简称“链式存储”。</h5><pre><code>例如：单链表、双链表、循环单（双）链表</code></pre><h4 id="4-不同实现方式的时间复杂度（不要硬背结论、要从实现方式入手分情况讨论，下述为特定情况下的时间复杂度）"><a href="#4-不同实现方式的时间复杂度（不要硬背结论、要从实现方式入手分情况讨论，下述为特定情况下的时间复杂度）" class="headerlink" title="4. 不同实现方式的时间复杂度（不要硬背结论、要从实现方式入手分情况讨论，下述为特定情况下的时间复杂度）"></a>4. 不同实现方式的时间复杂度（不要硬背结论、要从实现方式入手分情况讨论，下述为特定情况下的时间复杂度）</h4><h5 id="1-数组：随机索引O-1-、插入O-n-、删除O-n"><a href="#1-数组：随机索引O-1-、插入O-n-、删除O-n" class="headerlink" title="(1) 数组：随机索引O(1)、插入O(n)、删除O(n)"></a>(1) 数组：随机索引O(1)、插入O(n)、删除O(n)</h5><h5 id="2-单链表：查找某一元素O-n-、插入O-1-、删除O-n"><a href="#2-单链表：查找某一元素O-n-、插入O-1-、删除O-n" class="headerlink" title="(2) 单链表：查找某一元素O(n)、插入O(1)、删除O(n)"></a>(2) 单链表：查找某一元素O(n)、插入O(1)、删除O(n)</h5><h5 id="3-双链表：查找某一元素O-n-、插入O-1-、删除O-1"><a href="#3-双链表：查找某一元素O-n-、插入O-1-、删除O-1" class="headerlink" title="(3) 双链表：查找某一元素O(n)、插入O(1)、删除O(1)"></a>(3) 双链表：查找某一元素O(n)、插入O(1)、删除O(1)</h5><h4 id="5-考题：、2016-2、2012-42、2015-41、2019-41"><a href="#5-考题：、2016-2、2012-42、2015-41、2019-41" class="headerlink" title="5. 考题：、2016-2、2012-42、2015-41、2019-41"></a>5. 考题：、2016-2、2012-42、2015-41、2019-41</h4><p><strong>2016-1</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703145004164.png" alt="image-20210703145004164" loading="lazy"></p><blockquote><p>c   a   e  b  d   NULL  </p><p>​        f</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703211438769.png" alt="image-20210703211438769" loading="lazy"></p></blockquote><p><strong>2016-2</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703145156452.png" alt="image-20210703145156452" loading="lazy"></p><blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703211623904.png" alt="image-20210703211623904" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210705123934999.png" alt="image-20210705123934999" loading="lazy"></p></blockquote><p><strong>2012-42</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703205443192.png" alt="image-20210703205443192" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703213333780.png" alt="image-20210703213333780" loading="lazy"></p><blockquote><p><a href="https://www.acwing.com/problem/content/62/" target="_blank" rel="noopener">acwing 66 两个链表的第一个公共结点</a></p><p><strong>c++:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Definition for singly-linked list.</span><br><span class="hljs-comment">* struct ListNode &#123;</span><br><span class="hljs-comment">*     int val;</span><br><span class="hljs-comment">*     ListNode *next;</span><br><span class="hljs-comment">*     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment">* &#125;;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function">ListNode *<span class="hljs-title">findFirstCommonNode</span><span class="hljs-params">(ListNode *headA, ListNode *headB)</span> </span>&#123;<br>       <span class="hljs-keyword">auto</span> p = headA;<br>       <span class="hljs-keyword">auto</span> q = headB;<br>       <span class="hljs-keyword">while</span>(p!=q)&#123;<br>           <span class="hljs-keyword">if</span>(p)<br>           p = p-&gt;next;<br>           <span class="hljs-keyword">else</span> p = headB;<br>           <span class="hljs-keyword">if</span>(q)<br>           q = q-&gt;next;<br>           <span class="hljs-keyword">else</span> q = headA;<br>       &#125;<br>       <span class="hljs-keyword">return</span> p;<br>   &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p><strong>c:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c">&gt;<span class="hljs-comment">/**</span><br><span class="hljs-comment">* Definition for singly-linked list.</span><br><span class="hljs-comment">* struct ListNode &#123;</span><br><span class="hljs-comment">*     int val;</span><br><span class="hljs-comment">*     struct ListNode *next;</span><br><span class="hljs-comment">* &#125;;</span><br><span class="hljs-comment">*/</span><br>&gt;<span class="hljs-function">struct ListNode *<span class="hljs-title">findFirstCommonNode</span><span class="hljs-params">(struct ListNode *headA, struct ListNode *headB)</span> </span>&#123;<br>   <br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">p</span> = <span class="hljs-title">headA</span>;</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">q</span> = <span class="hljs-title">headB</span>;</span><br>   <br>   <span class="hljs-keyword">while</span>(p!=q)&#123;<br>       <br>       <span class="hljs-keyword">if</span>(p)&#123;<br>           p= p-&gt;next;<br>           <br>       &#125;<span class="hljs-keyword">else</span> p = headB;<br>       <br>        <span class="hljs-keyword">if</span>(q)&#123;<br>           q= q-&gt;next;<br>           <br>       &#125;<span class="hljs-keyword">else</span> q = headA;<br>       <br>   &#125;<br>   <br>   <span class="hljs-keyword">return</span> p;<br>   <br>&gt;&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703210247841.png" alt="image-20210703210247841" loading="lazy"></p></blockquote><p><strong>2015-41</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703205625516.png" alt="image-20210703205625516" loading="lazy"></p><p><strong>删除节点</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210704125135359.png" alt="image-20210704125135359" loading="lazy"></p><blockquote><p><a href="https://www.acwing.com/problem/content/3759/" target="_blank" rel="noopener">acwing 3756. 筛选链表</a>  </p><p><strong>c++:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++">&gt;<span class="hljs-comment">/**</span><br><span class="hljs-comment">&gt;* Definition for singly-linked list.</span><br><span class="hljs-comment">&gt;* struct ListNode &#123;</span><br><span class="hljs-comment">&gt;*     int val;</span><br><span class="hljs-comment">&gt;*     ListNode *next;</span><br><span class="hljs-comment">&gt;*     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment">&gt;* &#125;;</span><br><span class="hljs-comment">&gt;*/</span><br>&gt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br>&gt;<span class="hljs-keyword">public</span>:<br>  <span class="hljs-function">ListNode* <span class="hljs-title">filterList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>      <span class="hljs-keyword">bool</span> stu[<span class="hljs-number">10000</span>+<span class="hljs-number">5</span>]=&#123;<span class="hljs-literal">false</span>&#125;;<br>      stu[<span class="hljs-built_in">abs</span>(head-&gt;val)] = <span class="hljs-literal">true</span>;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> p = head; p-&gt;next ;)&#123;<br><br>          <span class="hljs-keyword">auto</span> t = <span class="hljs-built_in">abs</span>(p-&gt;next-&gt;val);<br>          <span class="hljs-keyword">if</span>(stu[t])&#123;<br>              <span class="hljs-comment">// 已经存在，删除</span><br>              <span class="hljs-keyword">auto</span> q  = p-&gt;next;<br>              p-&gt;next = q-&gt;next;<br>              <span class="hljs-keyword">delete</span> q;<br><br><br>          &#125;<span class="hljs-keyword">else</span>&#123;<br>              <span class="hljs-comment">// 不存在，</span><br>              stu[t] = <span class="hljs-literal">true</span>;<br>              p = p-&gt;next;<br><br><br>          &#125;<br><br>      &#125;<br><br>      <span class="hljs-keyword">return</span> head;<br>  &#125;<br>&gt;&#125;;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p><strong>c:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c">&gt;<span class="hljs-comment">/**</span><br><span class="hljs-comment">* Definition for singly-linked list.</span><br><span class="hljs-comment">* struct ListNode &#123;</span><br><span class="hljs-comment">*     int val;</span><br><span class="hljs-comment">*     struct ListNode *next;</span><br><span class="hljs-comment">* &#125;;</span><br><span class="hljs-comment">* </span><br><span class="hljs-comment">* Note: The returned array must be malloced, assume caller calls free().</span><br><span class="hljs-comment">*/</span><br>&gt;<span class="hljs-function">struct ListNode* <span class="hljs-title">filterList</span><span class="hljs-params">(struct ListNode* head)</span> </span>&#123;<br>   <br>   <span class="hljs-keyword">bool</span> stu[<span class="hljs-number">10000</span>+<span class="hljs-number">5</span>] = &#123;<span class="hljs-literal">false</span>&#125;;  <span class="hljs-comment">//记录节点中的值是否被使用了</span><br>   <br>   stu[<span class="hljs-built_in">abs</span>(head-&gt;val)] = <span class="hljs-literal">true</span>;   <span class="hljs-comment">// 第一个节点的值使用后  </span><br>   <br>   <span class="hljs-keyword">for</span>(struct ListNode *p = head ; p-&gt;next ;)&#123;<br>       <br>       <span class="hljs-keyword">int</span> x = <span class="hljs-built_in">abs</span>( p-&gt;next-&gt;val );<br>       <br>       <span class="hljs-keyword">if</span>(stu[ x ] ) <span class="hljs-comment">// 判断此时节点的值是否被使用</span><br>       &#123;<br>           <span class="hljs-comment">// 已经存在，使用过 删除值一样的结点</span><br>           <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">q</span> = <span class="hljs-title">p</span>-&gt;<span class="hljs-title">next</span>;</span><br>           p-&gt;next = q-&gt;next;<br>           <span class="hljs-built_in">free</span>(q);<br>           <br>       &#125;<span class="hljs-keyword">else</span>&#123;<br>           <span class="hljs-comment">// 此时节点的值第一次出现，现在标记使用</span><br>           stu[x] = <span class="hljs-literal">true</span>;<br>           p=p-&gt;next ; <span class="hljs-comment">// 到下一个结点；</span><br>           <br>           <br>       &#125;<br>       <br>       <br>   &#125;<br>   <br>   <span class="hljs-keyword">return</span> head;<br>&gt;&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703210639180.png" alt="image-20210703210639180" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703210730300.png" alt="image-20210703210730300" loading="lazy"></p></blockquote><p><strong>2019-41</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703205709442.png" alt="image-20210703205709442" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703205858599.png" alt="image-20210703205858599" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703214728201.png" alt="image-20210703214728201" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703215430852.png" alt="image-20210703215430852" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703215419546.png" alt="image-20210703215419546" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703220727048.png" alt="image-20210703220727048" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703220759353.png" alt="q" loading="lazy"></p><p><a href="https://www.acwing.com/problem/content/3760/" target="_blank" rel="noopener">acwing 3757. 重排链表</a></p><p><strong>c++:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rearrangedList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        <span class="hljs-comment">// 如果链表只有一个元素 , 不用处理直接打印</span><br>       <span class="hljs-keyword">if</span>(head-&gt;next == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> ; <br>        <br>        <span class="hljs-comment">// 链表长度</span><br>        <br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> t = head;t;t =t-&gt;next)&#123;<br>            <span class="hljs-comment">// cout&lt;&lt;head-&gt;val;</span><br>            n++;<br>        &#125;<br>      <br>        <span class="hljs-comment">// cout&lt;&lt;n&lt;&lt;endl;</span><br>        <br>        <span class="hljs-comment">// 前半段的结点数， 链表分为2段 1~mid-1 , mid ~ n;</span><br>        <span class="hljs-keyword">int</span> mid  = (n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">auto</span> a  = head;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;mid<span class="hljs-number">-1</span>;i++)a=a-&gt;next;<br>        <br>        <span class="hljs-keyword">auto</span> b =a-&gt;next;<br>        <span class="hljs-keyword">auto</span> c = b -&gt;next;<br>        <br>        a-&gt;next = <span class="hljs-literal">NULL</span>;<br>        b-&gt;next = <span class="hljs-literal">NULL</span>;<br>        <br>        <span class="hljs-comment">// 翻转 mid ~ n  到n~mid;</span><br>        <span class="hljs-keyword">while</span>(c)&#123;<br>            <br>            <span class="hljs-comment">// 预存后面的节点地址</span><br>            <span class="hljs-keyword">auto</span> t  = c-&gt;next;<br>            c-&gt;next = b; <span class="hljs-comment">// 翻转</span><br>            <br>            <span class="hljs-comment">//b,c 后移一位</span><br>            b = c;<br>            c = t;<br>            <br>        &#125;<br>        <span class="hljs-comment">// 1~mid-1与 n ~ mid 合并      b此时已经到最后一个节点，c是NULL</span><br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> p = head, q= b; q; )&#123;<br>            <br>            <span class="hljs-comment">// 预存q-&gt;next 的节点</span><br>            <span class="hljs-keyword">auto</span> t = q-&gt;next ;<br>            <br>            <span class="hljs-comment">//p与q连接</span><br>            q-&gt;next = p-&gt;next;<br>            p-&gt;next = q;<br>            <br>            <br>            <span class="hljs-comment">// p,q 后移</span><br>            p = q-&gt;next; <span class="hljs-comment">// or p=p-&gt;next-&gt;next  此时这里 p-&gt;next就是q</span><br>            q= t  ;  <span class="hljs-comment">// q 到之前预存的t的位置</span><br>            <br>            <span class="hljs-comment">//循环实现，达到合并</span><br>        &#125;<br>        <br>       <br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>c:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     struct ListNode *next;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rearrangedList</span><span class="hljs-params">(struct ListNode* head)</span> </span>&#123;<br>    <br>      <span class="hljs-comment">// 如果链表只有一个元素 , 不用处理直接打印</span><br>       <span class="hljs-keyword">if</span>(head-&gt;next == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> ; <br>        <br>        <span class="hljs-comment">// 链表长度</span><br>        <br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">for</span>(struct ListNode* t = head;t;t =t-&gt;next)&#123;<br>            <span class="hljs-comment">// cout&lt;&lt;head-&gt;val;</span><br>            n++;<br>        &#125;<br>      <br>        <span class="hljs-comment">// cout&lt;&lt;n&lt;&lt;endl;</span><br>        <br>        <span class="hljs-comment">// 前半段的结点数， 链表分为2段 1~mid-1 , mid ~ n;</span><br>        <span class="hljs-keyword">int</span> mid  = (n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">a</span>  = <span class="hljs-title">head</span>;</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;mid<span class="hljs-number">-1</span>;i++)a=a-&gt;next;<br>        <br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">b</span> =<span class="hljs-title">a</span>-&gt;<span class="hljs-title">next</span>;</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">c</span> = <span class="hljs-title">b</span> -&gt;<span class="hljs-title">next</span>;</span><br>        <br>        a-&gt;next = <span class="hljs-literal">NULL</span>;<br>        b-&gt;next = <span class="hljs-literal">NULL</span>;<br>        <br>        <span class="hljs-comment">// 翻转 mid ~ n  到n~mid;</span><br>        <span class="hljs-keyword">while</span>(c)&#123;<br>            <br>            <span class="hljs-comment">// 预存后面的节点地址</span><br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">t</span>  = <span class="hljs-title">c</span>-&gt;<span class="hljs-title">next</span>;</span><br>            c-&gt;next = b; <span class="hljs-comment">// 翻转</span><br>            <br>            <span class="hljs-comment">//b,c 后移一位</span><br>            b = c;<br>            c = t;<br>            <br>        &#125;<br>        <span class="hljs-comment">// 1~mid-1与 n ~ mid 合并      b此时已经到最后一个节点，c是NULL</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">q</span>= <span class="hljs-title">b</span>;</span><br>        <span class="hljs-keyword">for</span>(struct ListNode* p = head; q; )&#123;<br>            <br>            <span class="hljs-comment">// 预存q-&gt;next 的节点</span><br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">t</span> = <span class="hljs-title">q</span>-&gt;<span class="hljs-title">next</span> ;</span><br>            <br>            <span class="hljs-comment">//p与q连接</span><br>            q-&gt;next = p-&gt;next;<br>            p-&gt;next = q;<br>            <br>            <br>            <span class="hljs-comment">// p,q 后移</span><br>            p = q-&gt;next; <span class="hljs-comment">// or p=p-&gt;next-&gt;next  此时这里 p-&gt;next就是q</span><br>            q= t  ;  <span class="hljs-comment">// q 到之前预存的t的位置</span><br>            <br>            <span class="hljs-comment">//循环实现，达到合并</span><br>        &#125;<br>        <br>       <br>        <span class="hljs-keyword">return</span>;<br>    <br>    <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703210845455.png" alt="image-20210703210845455" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703210917316.png" alt="image-20210703210917316" loading="lazy"></p></blockquote><h4 id="6-押题：AcWing-34、AcWing-1451"><a href="#6-押题：AcWing-34、AcWing-1451" class="headerlink" title="6. 押题：AcWing 34、AcWing 1451"></a>6. 押题：AcWing 34、AcWing 1451</h4><p><a href="https://www.acwing.com/problem/content/86/" target="_blank" rel="noopener"><strong>AcWing 34</strong></a></p><p><strong><a href="https://www.acwing.com/problem/content/1453/" target="_blank" rel="noopener">AcWing 1451</a></strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第二讲-线性表&quot;&gt;&lt;a href=&quot;#第二讲-线性表&quot; class=&quot;headerlink&quot; title=&quot;第二讲 线性表&quot;&gt;&lt;/a&gt;第二讲 线性表&lt;/h3&gt;&lt;h4 id=&quot;1-将具有线性关系的数据存储到计算机中所使用的存储结构称为线性表。&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="acwing" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/"/>
    
    
    <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 第一讲 时间复杂度、特殊矩阵的存储和压缩</title>
    <link href="http://yoursite.com/2021/07/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/sjjg_1/"/>
    <id>http://yoursite.com/2021/07/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/sjjg_1/</id>
    <published>2021-07-02T16:00:00.000Z</published>
    <updated>2021-08-25T06:36:40.077Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一讲-时间复杂度、特殊矩阵的存储和压缩"><a href="#第一讲-时间复杂度、特殊矩阵的存储和压缩" class="headerlink" title="第一讲 时间复杂度、特殊矩阵的存储和压缩"></a>第一讲 时间复杂度、特殊矩阵的存储和压缩</h3><h4 id="一、时间、空间复杂度"><a href="#一、时间、空间复杂度" class="headerlink" title="一、时间、空间复杂度"></a>一、时间、空间复杂度</h4><p>​    只考虑<strong>次数</strong>，不考虑<strong>常数</strong>。常见复杂度有：O(1)、O(n)、O(n^k)、O(logn)、O(nlogn)<br>​    考题：2011-1、2012-1、2013-1、2014-1、2017-1、2019-1</p><p>2011-1    A</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703114145110.png" alt="image-20210703114145110" loading="lazy"></p><p>2013-1     D</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703114344332.png" alt="image-20210703114344332" loading="lazy"></p><p>2014-1     C</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703114413027.png" alt="image-20210703114413027" loading="lazy"></p><p>2017-1    B</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703114509847.png" alt="image-20210703114509847" loading="lazy"></p><p>2019-1     B</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703114638924.png" alt="image-20210703114638924" loading="lazy"></p><h4 id="二、特殊矩阵的存储和压缩"><a href="#二、特殊矩阵的存储和压缩" class="headerlink" title="二、特殊矩阵的存储和压缩"></a>二、特殊矩阵的存储和压缩</h4><p>​    矩阵的按行展开、按列展开，展开后下标从0开始。</p><blockquote><p>按行展开</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703121115993.png" alt="image-20210703121115993" loading="lazy"></p><p>按列展开</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703121136666.png" alt="image-20210703121136666" loading="lazy"></p></blockquote><p>​    考题：2016-4、2018-3、2020-1</p><p>2016-4   B </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703114904512.png" alt="image-20210703114904512" loading="lazy"></p><blockquote><p>2+3*28+2 = 88  88-1 = 87</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703115924738.png" alt="image-20210703115924738" loading="lazy"></p></blockquote><p>2018-3  A</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703115134910.png" alt="image-20210703115134910" loading="lazy"></p><blockquote><p>12+11+10+9+8 + 1 =  (8+12)*5/2 + 1 = 51</p><p>51-1 = 50;</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703120954271.png" alt="image-20210703120954271" loading="lazy"></p></blockquote><p>2020-1</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703115456047.png" alt="image-20210703115456047" loading="lazy"></p><blockquote><p>1+2+3+4+5+6 + 2 = (1+6)*6/2 +2 = 23</p><p>23-1 = 22 ;</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210703120852166.png" alt="image-20210703120852166" loading="lazy"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第一讲-时间复杂度、特殊矩阵的存储和压缩&quot;&gt;&lt;a href=&quot;#第一讲-时间复杂度、特殊矩阵的存储和压缩&quot; class=&quot;headerlink&quot; title=&quot;第一讲 时间复杂度、特殊矩阵的存储和压缩&quot;&gt;&lt;/a&gt;第一讲 时间复杂度、特殊矩阵的存储和压缩&lt;/h3&gt;&lt;</summary>
      
    
    
    
    <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="acwing" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/acwing/"/>
    
    
    <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>夏日必备(～￣▽￣)～</title>
    <link href="http://yoursite.com/2021/06/03/interesting/for_my_friend/"/>
    <id>http://yoursite.com/2021/06/03/interesting/for_my_friend/</id>
    <published>2021-06-02T16:00:00.000Z</published>
    <updated>2021-06-03T09:27:58.491Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><blockquote><p>夏日音乐  、、、小跳蛙</p></blockquote><audio controls height="100" width="100">    <source src="http://music.163.com/song/media/outer/url?id=371362.mp3" type="audio/mpeg">    <embed height="50" width="100" src="http://music.163.com/song/media/outer/url?id=371362.mp3"></audio><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><blockquote><p>我们在此处安装了空调，您可以在此自由休憩。</p></blockquote><iframe height="700" src="https://ac.yunyoujun.cn"></iframe><a id="more"></a><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><blockquote><p>我们在此处安装了电风扇，您可以在此自由休憩。</p></blockquote><iframe height="700" src="https://fan.elpsy.cn/"></iframe><hr><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><blockquote><p>我们在此处安装了电视，您可以在此自由休憩。</p></blockquote><iframe height="700" src="http://tvdang.ddns.net:8000/"></iframe><blockquote><p>大佬开发的云空调等、、</p><p>希望给你带来夏日的凉爽。  ヾ(≧▽≦*)o</p><p>原链接：<a href="https://www.yunyoujun.cn/posts/air-conditioner/" target="_blank" rel="noopener">https://www.yunyoujun.cn/posts/air-conditioner/</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;第一步&quot;&gt;&lt;a href=&quot;#第一步&quot; class=&quot;headerlink&quot; title=&quot;第一步&quot;&gt;&lt;/a&gt;第一步&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;夏日音乐  、、、小跳蛙&lt;/p&gt;
&lt;/blockquote&gt;
&lt;audio controls height=&quot;100&quot; width=&quot;100&quot;&gt;
    &lt;source src=&quot;http://music.163.com/song/media/outer/url?id=371362.mp3&quot; type=&quot;audio/mpeg&quot;&gt;
    &lt;embed height=&quot;50&quot; width=&quot;100&quot; src=&quot;http://music.163.com/song/media/outer/url?id=371362.mp3&quot;&gt;
&lt;/audio&gt;



&lt;h3 id=&quot;第二步&quot;&gt;&lt;a href=&quot;#第二步&quot; class=&quot;headerlink&quot; title=&quot;第二步&quot;&gt;&lt;/a&gt;第二步&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;我们在此处安装了空调，您可以在此自由休憩。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;iframe height=&quot;700&quot; src=&quot;https://ac.yunyoujun.cn&quot;&gt;&lt;/iframe&gt;</summary>
    
    
    
    <category term="小玩具" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%8E%A9%E5%85%B7/"/>
    
    <category term="夏日限定" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%8E%A9%E5%85%B7/%E5%A4%8F%E6%97%A5%E9%99%90%E5%AE%9A/"/>
    
    
    <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>信息安全 实验五、Windows安全策略</title>
    <link href="http://yoursite.com/2021/05/28/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%AE%9E%E9%AA%8C5/"/>
    <id>http://yoursite.com/2021/05/28/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%AE%9E%E9%AA%8C5/</id>
    <published>2021-05-27T16:00:00.000Z</published>
    <updated>2021-05-29T02:20:05.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验五、Windows安全策略"><a href="#实验五、Windows安全策略" class="headerlink" title="实验五、Windows安全策略"></a>实验五、Windows安全策略</h2><p>[TOC]</p><h3 id="一、实验目的及要求"><a href="#一、实验目的及要求" class="headerlink" title="一、实验目的及要求"></a>一、实验目的及要求</h3><p>  1．强化操作系统安全意识；</p><p>  2．了解Windows7/Windows 10中安全保护措施；</p><p>  3．掌握操作系统中安全概念；</p><p>4．学会使用Windows7/Windows 10常用安全设置方法。</p><h3 id="二、实验任务"><a href="#二、实验任务" class="headerlink" title="二、实验任务"></a>二、实验任务</h3><p>学会使用Windows7/Windows 10常用安全设置方法</p><h3 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h3><h3 id="1、账号密码的安全原则有哪些？如何设置？"><a href="#1、账号密码的安全原则有哪些？如何设置？" class="headerlink" title="1、账号密码的安全原则有哪些？如何设置？"></a>1、账号密码的安全原则有哪些？如何设置？</h3><h4 id="1-停掉Guest-帐号"><a href="#1-停掉Guest-帐号" class="headerlink" title="(1)停掉Guest 帐号"></a>(1)停掉Guest 帐号</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps13-1622254114260.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps14-1622254114275.jpg" alt="img" loading="lazy"> </p><h4 id="2-限制不必要的用户数量"><a href="#2-限制不必要的用户数量" class="headerlink" title="(2) 限制不必要的用户数量"></a>(2) 限制不必要的用户数量</h4><p>去掉所有的duplicate user 帐户， 测试用帐户， 共享帐号，普通部门帐号等等。用户组策略设置相应权限，并且经常检查系统的帐户，删除已经不在使用的帐户。这些帐户很多时候都是黑客们入侵系统的突破口，系统的帐户越多，黑客们得到合法用户的权限可能性一般也就越大。国内的nt/2000主机，如果系统帐户超过10个，一般都能找出一两个弱口令帐户。曾经有一台主机197个帐户中竟然有180个帐号都是弱口令帐户。 </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps15-1622254114275.jpg" alt="img" loading="lazy"> </p><h4 id="3-创建2个管理员用帐号"><a href="#3-创建2个管理员用帐号" class="headerlink" title="(3) 创建2个管理员用帐号"></a>(3) 创建2个管理员用帐号</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps16-1622254114275.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps17.png" alt="img" loading="lazy"> </p><h4 id="4-把系统administrator帐号改名"><a href="#4-把系统administrator帐号改名" class="headerlink" title="(4) 把系统administrator帐号改名"></a>(4) 把系统administrator帐号改名</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps18-1622254114275.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps19-1622254114275.jpg" alt="img" loading="lazy"> </p><h4 id="5-对密码配置执行以下策略"><a href="#5-对密码配置执行以下策略" class="headerlink" title="(5)对密码配置执行以下策略"></a>(5)对密码配置执行以下策略</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps22-1622254114276.jpg" alt="img" loading="lazy"> </p><h3 id="2、本地安全策略有哪些？-如何设置？至少五项"><a href="#2、本地安全策略有哪些？-如何设置？至少五项" class="headerlink" title="2、本地安全策略有哪些？ 如何设置？至少五项"></a>2、本地安全策略有哪些？ 如何设置？至少五项</h3><h4 id="账号策略"><a href="#账号策略" class="headerlink" title="账号策略"></a>账号策略</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps23-1622254114281.jpg" alt="img" loading="lazy"> </p><h4 id="本地策略"><a href="#本地策略" class="headerlink" title="本地策略"></a>本地策略</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps24-1622254114296.jpg" alt="img" loading="lazy"> </p><h4 id="公钥策略"><a href="#公钥策略" class="headerlink" title="公钥策略"></a>公钥策略</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps25-1622254114296.jpg" alt="img" loading="lazy"> </p><h4 id="应用程序控制策略"><a href="#应用程序控制策略" class="headerlink" title="应用程序控制策略"></a>应用程序控制策略</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps26-1622254114296.jpg" alt="img" loading="lazy"> </p><h4 id="网络列表管理器策略"><a href="#网络列表管理器策略" class="headerlink" title="网络列表管理器策略"></a>网络列表管理器策略</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps27-1622254114296.jpg" alt="img" loading="lazy"> </p><h3 id="3、用户权限分配策略有哪些？如何设置？至少五项"><a href="#3、用户权限分配策略有哪些？如何设置？至少五项" class="headerlink" title="3、用户权限分配策略有哪些？如何设置？至少五项"></a>3、用户权限分配策略有哪些？如何设置？至少五项</h3><h4 id="创建全局对象"><a href="#创建全局对象" class="headerlink" title="创建全局对象"></a>创建全局对象</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps28-1622254114296.jpg" alt="img" loading="lazy"> </p><h4 id="创建一个令牌对象"><a href="#创建一个令牌对象" class="headerlink" title="创建一个令牌对象"></a>创建一个令牌对象</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps29-1622254114296.jpg" alt="img" loading="lazy"> </p><h4 id="更改系统时间"><a href="#更改系统时间" class="headerlink" title="更改系统时间"></a>更改系统时间</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps30-1622254114296.jpg" alt="img" loading="lazy"> </p><h4 id="允许本次登录"><a href="#允许本次登录" class="headerlink" title="允许本次登录"></a>允许本次登录</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps31-1622254114296.jpg" alt="img" loading="lazy"> </p><h4 id="作为服务登录"><a href="#作为服务登录" class="headerlink" title="作为服务登录"></a>作为服务登录</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps32-1622254114297.jpg" alt="img" loading="lazy"> </p><h3 id="4、用户和组策略有哪些？-如何设置？至少五项"><a href="#4、用户和组策略有哪些？-如何设置？至少五项" class="headerlink" title="4、用户和组策略有哪些？ 如何设置？至少五项"></a>4、用户和组策略有哪些？ 如何设置？至少五项</h3><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps33-1622254114298.jpg" alt="img" loading="lazy"> </p><h4 id="域名解析策略"><a href="#域名解析策略" class="headerlink" title="域名解析策略"></a>域名解析策略</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps35.jpg" alt="img" loading="lazy"> </p><h4 id="服务器备份系统策略"><a href="#服务器备份系统策略" class="headerlink" title="服务器备份系统策略"></a>服务器备份系统策略</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps36.jpg" alt="img" loading="lazy"> </p><h4 id="网络：DNS客户端策略"><a href="#网络：DNS客户端策略" class="headerlink" title="网络：DNS客户端策略"></a>网络：DNS客户端策略</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps37.jpg" alt="img" loading="lazy"> </p><h4 id="打印机策略："><a href="#打印机策略：" class="headerlink" title="打印机策略："></a>打印机策略：</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps38.jpg" alt="img" loading="lazy"> </p><h4 id="Windows登录注销策略："><a href="#Windows登录注销策略：" class="headerlink" title="Windows登录注销策略："></a>Windows登录注销策略：</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps39.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps40.jpg" alt="img" loading="lazy"> </p><h3 id="5．其他windows安全策略有哪些？如何设置？至少五项"><a href="#5．其他windows安全策略有哪些？如何设置？至少五项" class="headerlink" title="5．其他windows安全策略有哪些？如何设置？至少五项"></a>5．其他windows安全策略有哪些？如何设置？至少五项</h3><h4 id="（1）移动”我的文档”"><a href="#（1）移动”我的文档”" class="headerlink" title="（1）移动”我的文档”"></a>（1）移动”我的文档”</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps41.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps42.jpg" alt="img" loading="lazy"> </p><h4 id="（2）移动IE临时文件"><a href="#（2）移动IE临时文件" class="headerlink" title="（2）移动IE临时文件"></a>（2）移动IE临时文件</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps43.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps44.jpg" alt="img" loading="lazy"> </p><h4 id="（3）设置屏幕保护密码"><a href="#（3）设置屏幕保护密码" class="headerlink" title="（3）设置屏幕保护密码"></a>（3）设置屏幕保护密码</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps45.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps47.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps48.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps49.jpg" alt="img" loading="lazy"> </p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>（４）使用NTFS格式分区 </p><p>把服务器的所有分区都改成NTFS格式。NTFS文件系统要比FAT，FAT32的文件系统安全得多。这点不必多说，服务器都已经是NTFS的了</p><p>（５）保障备份盘的安全 </p><p>一旦系统资料被破坏，备份盘将是你恢复资料的唯一途径。备份完资料后，把备份盘防在安全的地方。千万别把资料备份在同一台服务器上，那样的话，还不如不要备份。 </p><p>（６）设定安全记录的访问权限 </p><p>安全记录在默认情况下是没有保护的，把他设置成只有Administrator和系统帐户才有权访问。 </p><p>（７）把敏感文件存放在另外的文件服务器中 虽然现在服务器的硬盘容量都很大，但是你还是应该考虑是否有必要把一些重要的用户数据(文件，数据表，项目文件等)存放在另外一个安全的服务器中，并且经常备份它们。 </p><p>（８）加密temp文件夹 </p><p>一些应用程序在安装和升级的时候，会把一些东西拷贝到temp文件夹，但是当程序升级完毕或关闭的时候，它们并不会自己清除temp文件夹的内容。所以，给temp文件夹加密可以给你的文件多一层保护。 </p><p>（９）锁住注册表 在windows中，只有administrators和Backup Operators才有从网络上访问注册表的权限。如果你觉得还不够的话，可以进一步设定注册表访问权限。 </p><p>（１０）关机时清除掉页面文件 </p><p>一些第三方的程序可以把一些没有的加密的密码存在内存中，页面文件中也可能含有另外一些敏感的资料。 要在关机的时候清楚页面文件，可以编辑注册表HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management</p><p>把ClearPageFileAtShutdown的值设置成1。</p><h3 id="四、实验小结（100字左右）"><a href="#四、实验小结（100字左右）" class="headerlink" title="四、实验小结（100字左右）"></a>四、实验小结（100字左右）</h3><p>在本次实验中学习了Windows安全策略，对Windows账号密码的安全原则、本地安全策略、用户和组策略、用户权限分配策略等有了更多的了解，学习到安全策略的重要性，在本次实验中对信息安全这门学科又有了跟加深刻的理解，受益匪浅，在今后开发项目和使用Windows过程中也会更加注重信息安全，期待下一次实验，感谢老师的教诲。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实验五、Windows安全策略&quot;&gt;&lt;a href=&quot;#实验五、Windows安全策略&quot; class=&quot;headerlink&quot; title=&quot;实验五、Windows安全策略&quot;&gt;&lt;/a&gt;实验五、Windows安全策略&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;</summary>
      
    
    
    
    <category term="信息安全" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="实验" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="信息安全" scheme="http://yoursite.com/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>信息安全 实验四、web安全</title>
    <link href="http://yoursite.com/2021/05/26/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%AE%9E%E9%AA%8C4/"/>
    <id>http://yoursite.com/2021/05/26/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%AE%9E%E9%AA%8C4/</id>
    <published>2021-05-25T16:00:00.000Z</published>
    <updated>2021-06-01T14:57:40.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验四、web安全"><a href="#实验四、web安全" class="headerlink" title="实验四、web安全"></a>实验四、web安全</h2><p>[TOC]</p><h3 id="一、实验目的及要求"><a href="#一、实验目的及要求" class="headerlink" title="一、实验目的及要求"></a>一、实验目的及要求</h3><p>1．熟悉浏览器安全的方法；</p><p>2．了解网页编程中SQL注入手段和防范措施；</p><p>3．强化动态网页设计安全意识。</p><h3 id="二、实验学时"><a href="#二、实验学时" class="headerlink" title="二、实验学时"></a>二、实验学时</h3><p>2学时</p><h3 id="三、实验任务"><a href="#三、实验任务" class="headerlink" title="三、实验任务"></a>三、实验任务</h3><p>掌握浏览器与动态网页设计的安全技术手段</p><h3 id="四、实验重点、难点"><a href="#四、实验重点、难点" class="headerlink" title="四、实验重点、难点"></a>四、实验重点、难点</h3><p>动态网页设计的安全技术</p><h3 id="五、实验过程："><a href="#五、实验过程：" class="headerlink" title="五、实验过程："></a>五、实验过程：</h3><h4 id="1、web浏览器比如IE浏览器的安全技术手段有哪些？请尽可能列出来。"><a href="#1、web浏览器比如IE浏览器的安全技术手段有哪些？请尽可能列出来。" class="headerlink" title="1、web浏览器比如IE浏览器的安全技术手段有哪些？请尽可能列出来。"></a>1、web浏览器比如IE浏览器的安全技术手段有哪些？请尽可能列出来。</h4><p>答：</p><p>1.白名单</p><p>2.禁用或限制使用Java程序及ActiveX控件</p><p>3.防止泄露自己的信息</p><p>4.清除已浏览过的网址</p><p>5.清除已访问过的网页</p><p>6.永远不怕IE主页地址被修改</p><p>7.挖出IE本地安全配置选项</p><p>8.在DOS下打开”Internet属性”窗口</p><p>9.解除IE的分级审查口令</p><p>10.预防网页恶意代码</p><p>11.管理好Cookie</p><h4 id="2、动态网页设计请采用C-net实现一个登录案例，本案例中防范SQL注入有哪些措施？写出详细的设计与实现过程。"><a href="#2、动态网页设计请采用C-net实现一个登录案例，本案例中防范SQL注入有哪些措施？写出详细的设计与实现过程。" class="headerlink" title="2、动态网页设计请采用C#.net实现一个登录案例，本案例中防范SQL注入有哪些措施？写出详细的设计与实现过程。"></a>2、动态网页设计请采用C#.net实现一个登录案例，本案例中防范SQL注入有哪些措施？写出详细的设计与实现过程。</h4><p>答：</p><blockquote><p>详细见我另一篇博客</p><p><a href="https://blog.csdn.net/qq_43845915/article/details/117291181" target="_blank" rel="noopener">C#.net实现一个登录案例</a></p><p>下为<strong>缩减版</strong></p></blockquote><p><strong>Mysql数据库设计：</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps1-1622253256209.jpg" alt="img" loading="lazy"> </p><p><strong>插入数据：</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps2-1622253256166.jpg" alt="img" loading="lazy"> </p><p><strong>项目设计：</strong></p><p><img src="../../../../../%E7%AC%94%E8%AE%B0%E5%85%A8/img/wps3-1622253256165.jpg" alt="img" loading="lazy"> </p><p><strong>Login.aspx</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps4-1622253256166.jpg" alt="img" loading="lazy"> </p><p><strong>Login.aspx.cs</strong></p><p>对登录按钮写脚本：</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps5-1622253256166.jpg" alt="img" loading="lazy"> </p><p><strong><em>页面测试：</em></strong></p><p><strong>登录成功：</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps6-1622253256244.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps8-1622253256246.jpg" alt="img" loading="lazy"> </p><p><strong>sql 注入攻击</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps10-1622253256245.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps11-1622253256246.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps12-1622253256286.jpg" alt="img" loading="lazy"> </p><h4 id="3、上述登录案例中加验证码有什么好处？哪一种验证码相对安全？"><a href="#3、上述登录案例中加验证码有什么好处？哪一种验证码相对安全？" class="headerlink" title="3、上述登录案例中加验证码有什么好处？哪一种验证码相对安全？"></a>3、上述登录案例中加验证码有什么好处？哪一种验证码相对安全？</h4><p>答：</p><p>可以防止恶意破解密码、刷票、论坛灌水，有效防止某个黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试，实际上用验证码是现在很多网站通行的方式，利用比较简易的方式实现了这个功能。</p><p>常用验证码：</p><p>图形验证码 </p><p>短信验证码</p><p>语音验证码</p><p>滑动验证码</p><p>相对安全：点触式和滑动式的验证码，通过采集用户当前各种的参数行为（行为轨距，操作时间，当前环境等等）来判断是否为机器行为。在用户体验上，手机端不是很建议使用选字类型的验证码，对于非大屏的手机不是很友好。在安全性上，这类验证码要比其他验证码破解成本高</p><h4 id="4、在web安全有哪些安全措施？请尽可能列出来。"><a href="#4、在web安全有哪些安全措施？请尽可能列出来。" class="headerlink" title="4、在web安全有哪些安全措施？请尽可能列出来。"></a>4、在web安全有哪些安全措施？请尽可能列出来。</h4><p>答：</p><p> <strong>HTTP Basic验证</strong></p><p>这种验证成为HTTP基本验证，它是由HTTP1.1规范定义的，这是一种保护资源的最简单和最常用的验证机制。当浏览器请求任何受保护资源时，服务器都要求一个用户名和口令。如果用户输入了一个合法的用户名和口令，服务器才发送资源。</p><p>HTTP基本验证的优点是：实现较容易，所有的浏览器都支持。缺点是：因为用户名和口令没有被加密，而是采用Base64编码，所以是不安全的；不能自定义对话框的外观</p><p><strong><em>HTTP Digest验证</em></strong></p><p>这种验证称为HTTP摘要验证，它除了口令是以加密的方式发送，其他与基本验证都一样，但比基本验证全。</p><p>HTTP摘要验证的优点有：比基本验证安全；缺点：只能被IE5以上版本支持；许多Servlet容器不支持，因为规范并没有强制要求。</p><p><strong><em>FORM-based验证</em></strong></p><p>这种验证称为基本表单的验证，它类似于基本验证，但它使用用户自定义的表单来获得用户名和口令而不是使用浏览器的弹出对话框。开发人员必须创建表单的HTTP页面，对表单外观可以定制。</p><p>基本验证表单的优点是：所有的浏览器都支持，而容易实现。客观可以定制登录页面的外观。缺点是：它不是安全的，用户名/口令没有加密。</p><p><strong><em>HTTPS Client验证</em></strong></p><p>这种验证称为客户证书验证。它采用HTTPS传输信息。HTTPS是在安全套接层（Secure Socket Layer,SSL）之上的HTTP,SSL可以保证Internet上敏感数据传输的保密性。在这样机制中，当浏览器和服务器之间建立起SSL连接后，所有数据都以加密的形式传输。</p><p>优点：它是4中验证类型中最安全的，所有常用浏览器都支持；缺点：它需要一个证书授权机构（如VeriSign）的证书；它的实现和维护的成本较高。</p><p><strong><em>什么是Sql注入？</em></strong></p><p>就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令</p><p>防护Sql注入：</p><p>1、永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双”-“进行转换等；</p><p>2、永远不要使用动态拼装SQL，可以使用参数化的SQL或者直接使用存储过程进行数据查询存取；</p><p>3、永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接；</p><p>4、不要把机密信息明文存放，请加密或者hash掉密码和敏感的信息。</p><p><strong><em>CSRF攻击是什么 ？</em></strong></p><p>　　英文全称是Cross-Site-Request-Forgery 即 跨站请求伪造，顾名思义 CSRF攻击就是黑客引诱用户打开黑客的网站，利用用户的登录状态发起跨站请求。</p><p>防护CSRF攻击：</p><p>1、针对实际情况，设置 Cookie 的 SameSite 属性为 Strict 或 Lax</p><p>2、服务端验证请求来源（Referer，Origin）</p><p>3、使用CSRF Token ，服务端随机生成返回给浏览器的Token</p><p>4、加入二次验证（独立的支付密码）</p><h3 id="六、实验小结（100字左右）"><a href="#六、实验小结（100字左右）" class="headerlink" title="六、实验小结（100字左右）"></a>六、实验小结（100字左右）</h3><p>本次实验学习了用c#开发登录界面，在开发过程中虽然有些许的困难，但最后不断学习，提升了。受益匪浅，也学习到sql攻击，今后数据库设计和后台代码编程将会更加注意信息安全这方面。本次实验学会了很多，期待下一次的实验。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实验四、web安全&quot;&gt;&lt;a href=&quot;#实验四、web安全&quot; class=&quot;headerlink&quot; title=&quot;实验四、web安全&quot;&gt;&lt;/a&gt;实验四、web安全&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;一、实验目的及要求&quot;&gt;&lt;a href=&quot;#一、实</summary>
      
    
    
    
    <category term="信息安全" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="实验" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="信息安全" scheme="http://yoursite.com/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>C#.net实现一个登录案例</title>
    <link href="http://yoursite.com/2021/05/26/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8B/"/>
    <id>http://yoursite.com/2021/05/26/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8B/</id>
    <published>2021-05-25T16:00:00.000Z</published>
    <updated>2021-05-26T06:39:00.942Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-net实现一个登录案例"><a href="#C-net实现一个登录案例" class="headerlink" title="C#.net实现一个登录案例"></a>C#.net实现一个登录案例</h2><h3 id="1-Mysql数据库设计"><a href="#1-Mysql数据库设计" class="headerlink" title="1.Mysql数据库设计"></a>1.Mysql数据库设计</h3><p><strong>开启服务：</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210526141015250.png" alt="image-20210526141015250" loading="lazy"></p><p><strong>新建数据库、表：</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210526135004003.png" alt="image-20210526135004003" loading="lazy"></p><p><strong>插入数据：</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210526135030902.png" alt="image-20210526135030902" loading="lazy"></p><h3 id="2-VS2019-ASP-NET-环境安装"><a href="#2-VS2019-ASP-NET-环境安装" class="headerlink" title="2.VS2019 ASP.NET 环境安装"></a>2.VS2019 ASP.NET 环境安装</h3><p><a href="https://blog.csdn.net/qq_40401866/article/details/104609155" target="_blank" rel="noopener">https://blog.csdn.net/qq_40401866/article/details/104609155</a></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210526135420208.png" alt="image-20210526135420208" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210526135532262.png" alt="image-20210526135532262" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210525205447668.png" alt="image-20210525205447668" loading="lazy"></p><p><strong>安装成功后：</strong></p><p>新建项目：</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210525210553981.png" alt="image-20210525210553981" loading="lazy"></p><h3 id="2-项目导入Mysql包："><a href="#2-项目导入Mysql包：" class="headerlink" title="2.项目导入Mysql包："></a>2.项目导入Mysql包：</h3><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210525211328469.png" alt="image-20210525211328469" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210525211415162.png" alt="image-20210525211415162" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210525211424265.png" alt="image-20210525211424265" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210525211438297.png" alt="image-20210525211438297" loading="lazy"></p><h3 id="3、项目设计"><a href="#3、项目设计" class="headerlink" title="3、项目设计"></a>3、项目设计</h3><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210526141143531.png" alt="image-20210526141143531" loading="lazy"></p><p>Login.aspx</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210526140002057.png" alt="image-20210526140002057" loading="lazy"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C#">&lt;%@ Page Language&#x3D;&quot;C#&quot; AutoEventWireup&#x3D;&quot;true&quot; CodeBehind&#x3D;&quot;Login.aspx.cs&quot; Inherits&#x3D;&quot;Test01.Login&quot; %&gt;<br><br>&lt;!DOCTYPE html&gt;<br><br>&lt;html xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot;&gt;<br>&lt;head runat&#x3D;&quot;server&quot;&gt;<br>&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot;&#x2F;&gt;<br>    &lt;title&gt;&lt;&#x2F;title&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;form id&#x3D;&quot;form1&quot; runat&#x3D;&quot;server&quot;&gt;<br>        &lt;div&gt;<br>        &lt;&#x2F;div&gt;<br>         用户名：&lt;asp:TextBox ID&#x3D;&quot;txtUserName&quot; runat&#x3D;&quot;server&quot;&gt;&lt;&#x2F;asp:TextBox&gt;<br>        &lt;br &#x2F;&gt;<br>        &lt;br &#x2F;&gt;<br>         密  码： &lt;asp:TextBox ID&#x3D;&quot;txtPwd&quot; runat&#x3D;&quot;server&quot;&gt;&lt;&#x2F;asp:TextBox&gt;<br>        &lt;br &#x2F;&gt;<br>        &lt;br &#x2F;&gt;<br>        &lt;asp:Button ID&#x3D;&quot;btnLogin&quot; runat&#x3D;&quot;server&quot; OnClick&#x3D;&quot;Button1_Click&quot; Text&#x3D;&quot;确定&quot; &#x2F;&gt;<br>       <br><br>    &lt;&#x2F;form&gt;<br>&lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure><p><strong>Login.aspx.cs</strong></p><p>对登录按钮写脚本：</p><blockquote><p> string connStr = “server=localhost;uid=root;pwd=123456;database=unity_test”;</p><p>localhost为ip地址，本地的话就写localhost</p><p>uid = 你的账号，</p><p>pwd= 你的密码</p><p>database= 你的数据库</p><p>（详细见上数据库） </p></blockquote><blockquote><p>string sql = “select count(*) from users where username=’”+name+”‘ and password=’”+pwd+”‘“;//获取数据中的信息</p><p>users 为你的表名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c#">using MySql.Data.MySqlClient;<br>using System;<br>using System.Collections.Generic;<br>using System.Configuration;<br>using System.Data;<br>using System.Data.SqlClient;<br>using System.Linq;<br>using System.Web;<br>using System.Web.UI;<br>using System.Web.UI.WebControls;<br><br>namespace Test01<br>&#123;<br>    public partial class Login : System.Web.UI.Page<br>    &#123;<br>        <br>        protected void Page_Load(object sender, EventArgs e)<br>        &#123;<br><br>        &#125;<br><br>        protected void Button1_Click(object sender, EventArgs e)<br>        &#123;<br><br>            string name &#x3D; txtUserName.Text;<br>            string pwd &#x3D; txtPwd.Text;<br>            if (name !&#x3D; null || pwd !&#x3D; null)<br>            &#123;<br>                string sql &#x3D; &quot;select count(*) from users where username&#x3D;&#39;&quot;+name+&quot;&#39; and password&#x3D;&#39;&quot;+pwd+&quot;&#39;&quot;;&#x2F;&#x2F;获取数据中的信息<br>               <br>                &#x2F;&#x2F;连接数据库<br>                string connStr &#x3D; &quot;server&#x3D;localhost;uid&#x3D;root;pwd&#x3D;123456;database&#x3D;unity_test&quot;;<br>                MySqlConnection conn &#x3D; new MySqlConnection(connStr);<br>                conn.Open();<br>                MySqlCommand cmd &#x3D; new MySqlCommand(sql, conn);<br>                <br>                string obj &#x3D; cmd.ExecuteScalar().ToString();<br>                conn.Close();<br>                <br>                if (Convert.ToInt32(obj)&gt; 0)<br>                &#123;<br>                    &#x2F;&#x2F;Response.Write(&quot;登录成功&quot;);<br>                    Response.Write(&quot;&lt;script&gt;alert(&#39;登录成功！&#39;);&lt;&#x2F;script&gt;&quot;);<br>                &#125;<br>                else<br>                &#123;<br>                    &#x2F;&#x2F;Response.Write(&quot;登录失败&quot;);<br>                    Response.Write(&quot;&lt;script&gt;alert(&#39;用户名或密码错误，请重新输入！&#39;);&lt;&#x2F;script&gt;&quot;);<br>                &#125;<br>            &#125;<br>            else<br>            &#123;<br>                return;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="页面测试"><a href="#页面测试" class="headerlink" title="页面测试"></a>页面测试</h3><p><strong>登录成功：</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210526135104194.png" alt="image-20210526135104194" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210526135212778.png" alt="image-20210526135212778" loading="lazy"></p><p><strong>登录失败：</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210526135253251.png" alt="image-20210526135253251" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210526135240595.png" alt="image-20210526135240595" loading="lazy"></p><p><strong>sql 注入攻击</strong></p><blockquote><p>根据代码显示正常提交登录操作如用户名“admin”密码“123456”这样提交以后程序组合成的sql语句为“select * from users where username=’lzk’ and userpwd=’123456’”提交以后就应该显示登录成功对话框，然而用户非法输入密码的时候就有可能产生注入漏洞。比如用户名输入admin密码输入’or ‘1’=’1这是组合成的sql语句则为“select * from users where username=’admin’ and userpwd=’’ or ‘1’=’1’”这样就能通过验证因为有一个or把前面所有的判断都否定了只要or后面的成立就可以了。但是or后面还打了一个1=1这样不管or前面是什么后面这个1=1都成立这就导致判断始终成立。</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210526135129361.png" alt="image-20210526135129361" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210526134816022.png" alt="image-20210526134816022" loading="lazy"></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210526134846680.png" alt="image-20210526134846680" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;C-net实现一个登录案例&quot;&gt;&lt;a href=&quot;#C-net实现一个登录案例&quot; class=&quot;headerlink&quot; title=&quot;C#.net实现一个登录案例&quot;&gt;&lt;/a&gt;C#.net实现一个登录案例&lt;/h2&gt;&lt;h3 id=&quot;1-Mysql数据库设计&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="信息安全" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="信息安全" scheme="http://yoursite.com/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>信息安全实验三、网络监听</title>
    <link href="http://yoursite.com/2021/05/21/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%AE%9E%E9%AA%8C%E4%B8%89/"/>
    <id>http://yoursite.com/2021/05/21/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%AE%9E%E9%AA%8C%E4%B8%89/</id>
    <published>2021-05-20T16:00:00.000Z</published>
    <updated>2021-05-26T06:40:51.356Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验三、网络监听"><a href="#实验三、网络监听" class="headerlink" title="实验三、网络监听"></a>实验三、网络监听</h2><h3 id="一、实验目的及要求"><a href="#一、实验目的及要求" class="headerlink" title="一、实验目的及要求"></a>一、实验目的及要求</h3><p>1．熟悉网络监听工具ethereal操作界面；</p><p>2．了解ethereal捕获与监听网络数据方法；</p><p>3．强化网络安全意识。</p><h3 id="二、实验学时"><a href="#二、实验学时" class="headerlink" title="二、实验学时"></a>二、实验学时</h3><p>2学时</p><h3 id="三、实验任务"><a href="#三、实验任务" class="headerlink" title="三、实验任务"></a>三、实验任务</h3><p>利用网络监听工具捕获和监听数据报</p><p>四、实验重点、难点</p><p>网络监听工具ethereal的操作界面和熟练使用</p><h3 id="五、操作要点"><a href="#五、操作要点" class="headerlink" title="五、操作要点"></a>五、操作要点</h3><p>1.安装ethereal</p><p>2.熟悉软件操作界面</p><h3 id="六、注意事项"><a href="#六、注意事项" class="headerlink" title="六、注意事项"></a>六、注意事项</h3><p>实验之前，各台计算机之间用交换机连接，构成一个内部局域网。</p><h3 id="七、实验过程："><a href="#七、实验过程：" class="headerlink" title="七、实验过程："></a>七、实验过程：</h3><p><strong>（1）ethereal的安装与配置</strong></p><p><strong>ethereal</strong>的安装过程：</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps1-1621589326207.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps2-1621589326207.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps3-1621589326208.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps4-1621589326208.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps5-1621589326208.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps6-1621589326208.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps7-1621589326208.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps8-1621589326208.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps9-1621589326208.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps10-1621589326208.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps11-1621589326209.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps12-1621589326209.jpg" alt="img" loading="lazy"> </p><p><strong>ethereal的使用说明（以对百度网站进行三次握手为例）：</strong></p><p><em>ping <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></em></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps13-1621589326209.jpg" alt="img" loading="lazy"> </p><p><em>ip.dst ==14.215.177.38</em></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps14-1621589326209.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps15-1621589326209.jpg" alt="img" loading="lazy"> </p><p>3.</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps16-1621589326209.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps17-1621589326235.jpg" alt="img" loading="lazy"> </p><p><strong>（2）Ping数据包分析</strong></p><p>打开ethereal的捕获功能，找到局域网所在网关的ip地址，然后ping下该ip。</p><p>捕获截图：</p><p>本机地址：</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps18-1621589326301.jpg" alt="img" loading="lazy"> </p><p><em>ping 172.16.36.254</em></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps19-1621589326315.jpg" alt="img" loading="lazy"> </p><p><em>ip.dst==172.16.36.254 or ip.src==172.16.36.254</em></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps20-1621589326315.jpg" alt="img" loading="lazy"> </p><p>结果分析：</p><p>Sequence number ：</p><p>0X000d</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps21-1621589326235.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps22-1621589326235.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps23.jpg" alt="img" loading="lazy"> </p><p>Sequence number ：</p><p>0X000e</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps24.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps25.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps26.jpg" alt="img" loading="lazy"> </p><p>Sequence number ：</p><p>0X000f</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps27.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps28.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps29.jpg" alt="img" loading="lazy"> </p><p>Sequence number ：</p><p>0X0010</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps30.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps31.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps32.jpg" alt="img" loading="lazy"> </p><p>（2）打开ethereal的捕获功能，找到校园网环境下某网址，比如学费查询的地址，输入用户名和密码，对输入的用户和密码进行嗅探。</p><p>捕获截图：</p><p> <img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210521173236527.png" alt="image-20210521173236527" loading="lazy"></p><p>抓包捕获用户名和密码</p><h3 id="七、实验小结（100字左右）"><a href="#七、实验小结（100字左右）" class="headerlink" title="七、实验小结（100字左右）"></a>七、实验小结（100字左右）</h3><p>在本次实验中学会和熟悉了抓包工具（ethereal），虽然之前在网络原理课程初步了解了抓包和实验了，但本次实验是对信息安全的学习，对抓包和信息安全有了更加深刻的了解。实验的最后还进行了实践，抓取了用户名和密码，对信息安全有了更加深刻的体会，在今后我的项目开发中也会注意信息安全，防止信息泄露。本次实验受益匪浅，期待下一次实验。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实验三、网络监听&quot;&gt;&lt;a href=&quot;#实验三、网络监听&quot; class=&quot;headerlink&quot; title=&quot;实验三、网络监听&quot;&gt;&lt;/a&gt;实验三、网络监听&lt;/h2&gt;&lt;h3 id=&quot;一、实验目的及要求&quot;&gt;&lt;a href=&quot;#一、实验目的及要求&quot; class=&quot;he</summary>
      
    
    
    
    <category term="信息安全" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="实验" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="信息安全" scheme="http://yoursite.com/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Unity连接Mysql数据库，小项目学习</title>
    <link href="http://yoursite.com/2021/05/19/Unity/Unity%E8%BF%9E%E6%8E%A5Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%8C%E5%B0%8F%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2021/05/19/Unity/Unity%E8%BF%9E%E6%8E%A5Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%8C%E5%B0%8F%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-05-19T08:23:52.000Z</published>
    <updated>2021-05-24T06:45:45.782Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://editor.csdn.net/md/?articleId=117034983" target="_blank" rel="noopener">https://editor.csdn.net/md/?articleId=117034983</a></p><blockquote><p><strong>制作中可能用到的资料：</strong></p><p><a href="https://dev.mysql.com/downloads/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/</a></p><p>视频教学</p><p><a href="https://www.bilibili.com/video/BV1S7411M7P7?from=search&amp;seid=1780740931854569426" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1S7411M7P7?from=search&amp;seid=1780740931854569426</a></p><p>MySQL Connector/NET的下载以及安装教程</p><p><a href="https://blog.csdn.net/weixin_42220953/article/details/108341921" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42220953/article/details/108341921</a></p><p>下载地址：</p><p><a href="https://downloads.mysql.com/archives/c-net/" target="_blank" rel="noopener">https://downloads.mysql.com/archives/c-net/</a></p><p>Mysql 8.0.11 出现1251- Client does not support authentication protocol 错误解决办法</p><p><a href="https://blog.csdn.net/qq_41030861/article/details/100012275" target="_blank" rel="noopener">https://blog.csdn.net/qq_41030861/article/details/100012275</a></p><p><a href="https://blog.csdn.net/qq_34735841/article/details/100896095" target="_blank" rel="noopener">https://blog.csdn.net/qq_34735841/article/details/100896095</a></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210510215752787.png" alt="image-20210510215752787" loading="lazy"></p><p><a href="https://www.bilibili.com/read/cv4790659" target="_blank" rel="noopener">https://www.bilibili.com/read/cv4790659</a></p></blockquote><h4 id="mysql服务启动"><a href="#mysql服务启动" class="headerlink" title="mysql服务启动"></a>mysql服务启动</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210519155346643.png" alt="image-20210519155346643" loading="lazy"></p><h4 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210519155426975.png" alt="image-20210519155426975" loading="lazy"></p><h4 id="unity-GUI-界面设计："><a href="#unity-GUI-界面设计：" class="headerlink" title="unity GUI 界面设计："></a>unity GUI 界面设计：</h4><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210519162952096.png" alt="image-20210519162952096" loading="lazy"></p><h4 id="写好unity-连接mysql的包装类："><a href="#写好unity-连接mysql的包装类：" class="headerlink" title="写好unity 连接mysql的包装类："></a>写好unity 连接mysql的包装类：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs c#">using System;<br>using System.Data;<br>using MySql.Data.MySqlClient;<br>using System.Diagnostics;<br>using UnityEngine;<br><br>public class MySqlAccess &#123;<br><br>    private static MySqlConnection mySqlConnection;&#x2F;&#x2F;连接类对象<br>    private static string host;&#x2F;&#x2F;IP地址<br>    private static string port;&#x2F;&#x2F;端口号<br>    private static string userName;&#x2F;&#x2F;用户名<br>    private static string password;&#x2F;&#x2F;密码<br>    private static string databaseName;&#x2F;&#x2F;数据库名称<br><br>    enum Operate &#123;<br>        Select, Insert<br>    &#125;<br>    &#x2F;&#x2F;&#x2F; &lt;summary&gt;<br>    &#x2F;&#x2F;&#x2F; 构造方法<br>    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;<br>    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;_host&quot;&gt;ip地址&lt;&#x2F;param&gt;<br>    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;_userName&quot;&gt;用户名&lt;&#x2F;param&gt;<br>    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;_password&quot;&gt;密码&lt;&#x2F;param&gt;<br>    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;_databaseName&quot;&gt;数据库名称&lt;&#x2F;param&gt;<br>    public MySqlAccess(string _host, string _port, string _userName, string _password, string _databaseName) &#123;<br>        host &#x3D; _host;<br>        port &#x3D; _port;<br>        userName &#x3D; _userName;<br>        password &#x3D; _password;<br>        databaseName &#x3D; _databaseName;<br>        OpenSql();<br>    &#125;<br>    &#x2F;&#x2F; 打开数据库<br>    public void OpenSql() &#123;<br>        try &#123;<br>            string mySqlString &#x3D;<br>                &quot;Database&#x3D;&quot; + databaseName + &quot;;DataSource&#x3D;&quot; + host + &quot;;User&#x3D;&quot; + userName + &quot;;Password&#x3D;&quot; + password + &quot;;port&#x3D;&quot; + port + &quot;;&quot;;<br>            mySqlConnection &#x3D; new MySqlConnection(mySqlString);<br>            UnityEngine.Debug.Log(&quot;连接成功&quot;);<br>            &#x2F;&#x2F;if(mySqlConnection.State &#x3D;&#x3D; ConnectionState.Closed)<br>            mySqlConnection.Open();<br><br>        &#125;<br>        catch (Exception e) &#123;<br>            throw new Exception(&quot;服务器连接失败，请重新检查MySql服务是否打开。&quot; + e.Message.ToString());<br>        &#125;<br><br>    &#125;<br>    &#x2F;&#x2F; 关闭数据库<br>    public void CloseSql() &#123;<br>        if (mySqlConnection !&#x3D; null) &#123;<br>            mySqlConnection.Close();<br>            mySqlConnection.Dispose();<br>            mySqlConnection &#x3D; null;<br>        &#125;<br>    &#125;<br><br>    &#x2F;&#x2F;&#x2F; &lt;summary&gt;<br>    &#x2F;&#x2F;&#x2F; 查询数据<br>    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;<br>    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;tableName&quot;&gt;表名&lt;&#x2F;param&gt;<br>    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;items&quot;&gt;要查询的列&lt;&#x2F;param&gt;<br>    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;whereColumnName&quot;&gt;查询的条件列&lt;&#x2F;param&gt;<br>    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;operation&quot;&gt;条件操作符&lt;&#x2F;param&gt;<br>    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;value&quot;&gt;条件的值&lt;&#x2F;param&gt;<br>    &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;<br>    public DataSet Select(string tableName, string[] items, string[] whereColumnName, string[] operation, string[] value) &#123;<br>        if (whereColumnName.Length !&#x3D; operation.Length || operation.Length !&#x3D; value.Length) &#123;<br>            throw new Exception(&quot;输入不正确：&quot; + &quot;要查询的条件、条件操作符、条件值 的数量不一致！&quot;);<br>        &#125;<br>        string query &#x3D; &quot;Select &quot; + items[0];<br>        for (int i &#x3D; 1; i &lt; items.Length; i++) &#123;<br>            query +&#x3D; &quot;,&quot; + items[i];<br>        &#125;<br><br>        query +&#x3D; &quot; FROM &quot; + tableName + &quot; WHERE &quot; + whereColumnName[0] + &quot; &quot; + operation[0] + &quot; &#39;&quot; + value[0] + &quot;&#39;&quot;;<br>        for (int i &#x3D; 1; i &lt; whereColumnName.Length; i++) &#123;<br>            query +&#x3D; &quot; and &quot; + whereColumnName[i] + &quot; &quot; + operation[i] + &quot; &#39;&quot; + value[i] + &quot;&#39;&quot;;<br>        &#125;<br>        return QuerySet(query, Operate.Select);<br><br>    &#125;<br><br>    &#x2F;&#x2F;&#x2F; &lt;summary&gt;<br>    &#x2F;&#x2F;&#x2F; 执行SQL语句<br>    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;<br>    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;sqlString&quot;&gt;sql语句&lt;&#x2F;param&gt;<br>    &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;<br>    private DataSet QuerySet(string sqlString, Operate op) &#123;<br>        <br>        if (mySqlConnection.State &#x3D;&#x3D; ConnectionState.Open) &#123;<br>            DataSet ds &#x3D; new DataSet();<br>            MySqlDataAdapter mySqlAdapter &#x3D; new MySqlDataAdapter(sqlString, mySqlConnection);<br>            mySqlAdapter.Fill(ds);<br>            switch (op) &#123;<br>                case Operate.Select: return ds.Tables[0].Rows.Count &gt; 0 ? ds : null;<br>                case Operate.Insert:return null;<br>            &#125;<br>            mySqlAdapter.Dispose();<br>        &#125;<br>        return null;<br>    &#125;<br><br><br>    public bool Insert(string tableName, string[] items, string[] value) &#123;<br>        DataSet ds &#x3D; QuerySet(&quot;Select level from test where name&#x3D;&#39;&quot; + value[0] + &quot;&#39;&quot;, Operate.Select);<br>        if (ds !&#x3D; null) &#123;<br>            return false;<br>        &#125;<br>        else &#123;<br>            if (items.Length !&#x3D; value.Length) &#123;<br>                throw new Exception(&quot;输入不正确：&quot; + &quot;要查询的条件、条件操作符、条件值 的数量不一致！&quot;);<br>            &#125;<br>            string query &#x3D; &quot;Insert Into &quot; + tableName + &quot; ( &quot; + items[0];<br>            for (int i &#x3D; 1; i &lt; items.Length; i++) &#123;<br>                query +&#x3D; &quot;,&quot; + items[i];<br>            &#125;<br>            query +&#x3D; &quot; ) Values ( &#39;&quot; + value[0] + &quot;&#39;&quot;;<br>            for (int i &#x3D; 1; i &lt; value.Length; i++) &#123;<br>                query +&#x3D; &quot;,&#39;&quot; + value[i] + &quot;&#39;&quot;;<br>            &#125;<br>            query +&#x3D; &quot; )&quot;;<br>            UnityEngine.Debug.Log(query);<br>            QuerySet(query, Operate.Insert);<br>        &#125;<br>        return true;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="登录按钮绑定脚本User-Log-In-js"><a href="#登录按钮绑定脚本User-Log-In-js" class="headerlink" title="登录按钮绑定脚本User Log In.js"></a>登录按钮绑定脚本User Log In.js</h4><p>当点击登录后调用脚本中OnLogInBtnClick()方法：</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210519163023360.png" alt="image-20210519163023360" loading="lazy"></p><p>UserLogIn.js：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs C#">using System.Collections;<br>using System.Collections.Generic;<br>using System.Data;<br>using UnityEngine;<br>using UnityEngine.UI;<br><br>public class UserLogIn : MonoBehaviour<br>&#123;<br>    public InputField userNameInput;<br>    public InputField passwordInput;<br>    public Image mes;<br>    public string host;&#x2F;&#x2F;IP地址<br>    public string port;&#x2F;&#x2F;端口号<br>    public string userName;&#x2F;&#x2F;用户名<br>    public string password;&#x2F;&#x2F;密码<br>    public string databaseName;&#x2F;&#x2F;数据库名称<br>    protected MySqlAccess mysql;&#x2F;&#x2F;封装好的数据库类<br>    &#x2F;&#x2F; Start is called before the first frame update<br>    void Start()<br>    &#123;<br>        mysql &#x3D; new MySqlAccess(host, port, userName, password, databaseName);<br>    &#125;<br><br>    &#x2F;&#x2F; Update is called once per frame<br>    void Update()<br>    &#123;<br>        <br>    &#125;<br><br>    public void OnLogInBtnClick() &#123;<br>        mysql.OpenSql();<br>        &#x2F;&#x2F;获取数据<br>        DataSet ds &#x3D; mysql.Select(&quot;test&quot;, new string[] &#123; &quot;password&quot;,&quot;level&quot; &#125;, new string[] &#123; &quot;name&quot;&#125;, new string[] &#123; &quot;&#x3D;&quot;&#125;, new string[] &#123; userNameInput.text&#125;);<br>        if (ds !&#x3D; null) &#123;<br>            DataTable table &#x3D; ds.Tables[0];<br>            List&lt;string&gt;data&#x3D;new List&lt;string&gt;();<br>            foreach (DataRow row in table.Rows) &#123;<br>                foreach (DataColumn col in table.Columns) &#123;<br>                    data.Add(row[col].ToString());<br>                &#125;<br>            &#125;<br>            if (data[0]&#x3D;&#x3D;passwordInput.text) &#123;<br>                Debug.Log(&quot;登陆成功&quot;);<br>                mes.color &#x3D; Color.green;<br>            &#125;<br>            else &#123;<br>                Debug.Log(&quot;登陆失败&quot;);<br>                mes.color &#x3D; Color.red;<br>            &#125;<br>        &#125;<br>        else &#123;<br>            Debug.Log(&quot;登陆失败&quot;);<br>            mes.color &#x3D; Color.red;<br>        &#125;<br>        mysql.CloseSql();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动后：</p><p>初始状态：</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210519163249232.png" alt="image-20210519163249232" loading="lazy"></p><p>登录成功：</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210519163314720.png" alt="image-20210519163314720" loading="lazy"></p><p>登录失败：</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/image-20210519163334533.png" alt="image-20210519163334533" loading="lazy"></p><blockquote><p>扩展：注册功能，有时间写</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://editor.csdn.net/md/?articleId=117034983&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://editor.csdn.net/md/?articleId=117034983&lt;</summary>
      
    
    
    
    <category term="Unity" scheme="http://yoursite.com/categories/Unity/"/>
    
    
    <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>信息安全实验二、漏洞扫描与病毒防治</title>
    <link href="http://yoursite.com/2021/05/18/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%AE%9E%E9%AA%8C%E4%BA%8C/"/>
    <id>http://yoursite.com/2021/05/18/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%AE%9E%E9%AA%8C%E4%BA%8C/</id>
    <published>2021-05-17T16:00:00.000Z</published>
    <updated>2021-05-24T06:39:49.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验二、漏洞扫描与病毒防治"><a href="#实验二、漏洞扫描与病毒防治" class="headerlink" title="实验二、漏洞扫描与病毒防治"></a>实验二、漏洞扫描与病毒防治</h2><h3 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h3><ol><li><p>掌握漏洞扫描这种信息探测技术的原理。 </p></li><li><p>学会使用常见的漏洞扫描工具。 </p></li><li><p>熟悉经典的操作系统漏洞和配置漏洞。 </p></li></ol><h3 id="二、实验环境"><a href="#二、实验环境" class="headerlink" title="二、实验环境"></a>二、实验环境</h3><ol><li>网络：局域网环境。</li></ol><ol start="2"><li>软件：X-Scan-v3.1。 </li></ol><h3 id="三、实验原理"><a href="#三、实验原理" class="headerlink" title="三、实验原理"></a>三、实验原理</h3><p>所谓的漏洞，指的是硬件、软件或策略上的缺陷，从而使得攻击者能够在未授权的情况下访问或控制系统。 漏洞扫描，就是自动检测远程或本地主机安全性弱点的过程。它采用积极的、非破坏性的办法来检验系统是否有可能被攻击崩溃。它利用了一系列的脚本模拟对系统进行攻击的行为，然后对结果进行分析。它还针对已知的网络漏洞进行检验。 其工作机制是：在端口扫描的基础上，判断系统正在运行的服务，针对不同的服务，结合漏洞知识，发送不同的定制数据包，分析返回的数据包，确定系统是否存在该漏洞。对于不同的系统、不同的服务，漏洞扫描使用的工具不同。 漏洞扫描可以包含的种类有： · 系统漏洞 ·  特定服务的漏洞  o WEB服务 o 数据库服务 o FTP服务 o Mail服务  · 网络及管理设备漏洞  o 路由器、交换机 o SNMP设备 信息泄漏漏洞  o 用户信息 o 共享信息  · 人为管理漏洞  o 弱口令 o 错误配置  </p><p>漏洞扫描的日后发展趋势为： ·</p><p> 插件（plugin，或者叫做功能模块）技术  o 每个插件都封装一个或者多个漏洞的测试手段，主扫描程序通过调用插件的方法来 执行扫描。  · </p><p>使用专用脚本语言  o 其实就是一种更高级的插件技术，用户可以使用专用脚本语言来扩充软件功能。  ·  </p><p>由安全扫描程序到安全评估专家系统  o 扫描系统都能够将对单个主机的扫描结果进行整理，形成报表，并能够对具体漏洞 提出一些解决方法。 </p><h3 id="四、实验内容"><a href="#四、实验内容" class="headerlink" title="四、实验内容"></a>四、实验内容</h3><ol><li><p>Netbios空会话漏洞扫描。 </p></li><li><p>IIS和CGI漏洞扫描。 </p></li><li><p>弱口令漏洞扫描。 </p></li><li><p>查看漏洞扫描报告。 </p></li><li><p>分析各种漏洞的补救措施。 </p></li></ol><h3 id="五、实验步骤-·"><a href="#五、实验步骤-·" class="headerlink" title="五、实验步骤 ·"></a>五、实验步骤 ·</h3><p>1、xscan漏洞扫描：</p><p>运行实验工具目录下的xscan-gui.exe。 ·</p><p>选择”设置”菜单项中的”扫描参数”。  ·  </p><p>在”基本设置”选项卡中输入目标服务器的IP地址（如192.168.33.111），也就是我们的漏洞扫描对象。</p><p>在”高级设置”选项卡的―其他设置‖中，选择”无条件扫描”。这是为了防止漏过无法ping通的目标主机。</p><p>点击”确定”按钮，结束扫描参数的设置，回到XScan主界面。 ·</p><p>选择”设置”菜单项中的”扫描模块”。  ·  </p><p>在”扫描模块”的左边列表中仅选中”Netbios信息”。点击”确定”按钮结束”扫描模块”的设置，回到XScan主界面。</p><p>第一次扫描完毕之后，查看自动打开的扫描报告（也可通过―查看‖ 菜单项中的―检测报告‖ 来查看扫描报告）。请将扫描的结果写入实验报告。</p><p>  ·  </p><p>再次进入”扫描模块”设置界面，选中”NT-Server弱口令”、”FTP弱口令”、”Anonymous Pub”、”POP3弱口令”、”SMTP弱口令”、”SQL-Server弱口令”。点击”确定”按钮回到XScan主界面。</p><p>点击运行按钮，或者选择”文件”菜单项中的”开始扫描”进行弱口令漏洞扫描。  · </p><p>第二次扫描完毕之后，查看自动打开的扫描报告。请将扫描的结果写入实验报告。 ·  </p><p>再次进入”扫描模块”设置界面，选中”IIS编码/解码漏洞”、”CGI漏洞”。点击”确定”按钮回到XScan主界面。</p><p>点击运行按钮，或者选择”文件”菜单项中的”开始扫描”进行IIS/CGI漏洞扫描。  · </p><p>第三次扫描完毕之后，查看自动打开的扫描报告。请将扫描的结果写入实验报告。 ·  </p><p>再次进入”扫描模块”设置界面，点击”全选”按钮选择所有的扫描模块。点击”确定”按钮回到XScan主界面。  · </p><p>点击运行按钮，或者选择”文件”菜单项中的”开始扫描”进行全面漏洞扫描。  · </p><p>第四次扫描完毕之后，查看自动打开的扫描报告。请将扫描的结果写入实验报告。 ·  </p><p>理解各种漏洞的形成原因，并分析相应的弥补、防御措施。</p><p><strong>1.第一次扫描完毕之后，查看自动打开的扫描报告（也可通过―查看‖ 菜单项中的―检测报告‖ 来查看扫描报告）。请将扫描的结果写入实验报告。</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps1-1621588506078.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps2-1621588506100.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps3-1621588506101.jpg" alt="img" loading="lazy"> </p><p><strong>2.第二次扫描完毕之后，查看自动打开的扫描报告。请将扫描的结果写入实验报告。</strong> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps4-1621588506101.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps5-1621588506079.jpg" alt="img" loading="lazy"> </p><p><strong>3.第三次扫描完毕之后，查看自动打开的扫描报告。请将扫描的结果写入实验报告。 ·</strong>  </p><hr><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps6-1621588506079.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps7-1621588506079.jpg" alt="img" loading="lazy"> </p><p><strong>4.第四次扫描完毕之后，查看自动打开的扫描报告。请将扫描的结果写入实验报告</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps8-1621588506079.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps9-1621588506079.jpg" alt="img" loading="lazy"> </p><p>漏洞扫描还有没有其他的方法？</p><h3 id="六、结合你维护计算机的经验，谈谈病毒防治的技术方法手段-至少谈3款软件"><a href="#六、结合你维护计算机的经验，谈谈病毒防治的技术方法手段-至少谈3款软件" class="headerlink" title="六、结合你维护计算机的经验，谈谈病毒防治的技术方法手段( 至少谈3款软件)"></a>六、结合你维护计算机的经验，谈谈病毒防治的技术方法手段( 至少谈3款软件)</h3><p><strong>（1）软件1：火绒</strong></p><p>操作方法：火绒</p><p>特色功能：</p><p>简洁</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps10-1621588506079.jpg" alt="img" loading="lazy"> </p><p><strong>（2）软件2：腾讯安全管家</strong></p><p>操作方法： 腾讯安全管家</p><p>特色功能：</p><p>广告较多</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps11-1621588506079.jpg" alt="img" loading="lazy"> </p><hr><p><strong>（3）软件3：360</strong></p><p>操作方法：360</p><p>特色功能：</p><p><strong>毒</strong></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps12-1621588506080.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps13-1621588506080.jpg" alt="img" loading="lazy"> </p><p>七、实验小结（100字左右）</p><p><strong><em>\</em>漏洞扫描与病毒防治**</strong></p><p>在本次实验中学会了用工具来漏洞扫描和病毒防治，在漏洞扫描中体会到漏洞的多样性，体会到在系统和软件的开发要多注意，平时使用未知的软件和程序也会更加注意，在病毒防范实验中我体会到一个好的杀毒软件的宝贵，好的杀毒软件：火绒简洁，好用，而不好的：360不仅没起到杀毒的作用，反而给我下载了很多绑定软件，它就是“毒”</p><p>在本次实验中受益匪浅，对网络安全有了更加深刻的了解，期待下一次的实验。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实验二、漏洞扫描与病毒防治&quot;&gt;&lt;a href=&quot;#实验二、漏洞扫描与病毒防治&quot; class=&quot;headerlink&quot; title=&quot;实验二、漏洞扫描与病毒防治&quot;&gt;&lt;/a&gt;实验二、漏洞扫描与病毒防治&lt;/h2&gt;&lt;h3 id=&quot;一、实验目的&quot;&gt;&lt;a href=&quot;#一、实</summary>
      
    
    
    
    <category term="信息安全" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="实验" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="信息安全" scheme="http://yoursite.com/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>信息安全实验一、加密与解密</title>
    <link href="http://yoursite.com/2021/05/15/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%AE%9E%E9%AA%8C%E4%B8%80/"/>
    <id>http://yoursite.com/2021/05/15/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%AE%9E%E9%AA%8C%E4%B8%80/</id>
    <published>2021-05-14T16:00:00.000Z</published>
    <updated>2021-06-03T09:15:19.327Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验一-加密与解密"><a href="#实验一-加密与解密" class="headerlink" title="实验一  加密与解密"></a>实验一  加密与解密</h2><h3 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h3><p>1.提高对加密与解密原理的认识</p><p>2.提高对信息隐藏原理的认识</p><p>3.学会使用加密与隐藏软件</p><p>4.了解口令破解基本方法；</p><p>5.体会设置安全口令的重要意义</p><h3 id="二、实验要求"><a href="#二、实验要求" class="headerlink" title="二、实验要求"></a>二、实验要求</h3><p>使用任意高级语言做出给文本文件加、解密的软件.  </p><h3 id="三、实验重点、难点"><a href="#三、实验重点、难点" class="headerlink" title="三、实验重点、难点"></a>三、实验重点、难点</h3><p>1.Easy code boy plus的使用</p><p>2.能熟练运用Lophtcrack、Aoxppr、Apdfprp、Mailhack等</p><h3 id="四、实验学时"><a href="#四、实验学时" class="headerlink" title="四、实验学时"></a>四、实验学时</h3><p>2学时</p><h3 id="五、实验内容"><a href="#五、实验内容" class="headerlink" title="五、实验内容"></a>五、实验内容</h3><p>1、凯撒密码实现、维吉尼亚表加密、DES  </p><p>2、加密与隐藏软件的使用</p><p>3、利用破解密码软件破解口令</p><h3 id="六、注意事项"><a href="#六、注意事项" class="headerlink" title="六、注意事项"></a>六、注意事项</h3><p>Easy code boy plus可以将不同类型的文件作为寄主文件，将各种文件隐藏到不同类型的文件中。为了减少实验时间，实验破解用的密码可以选得简单一些。如1234。</p><h3 id="七、实验步骤"><a href="#七、实验步骤" class="headerlink" title="七、实验步骤:"></a>七、实验步骤:</h3><p><strong>任务一、参考教科书有关内容，掌握凯撒加密方法，自行设计密钥.编制程序。</strong>  </p><p>密码术可以大致别分为两种：即换位和替代，当然也有两者结合的更复杂的方法。在换位中字母不变，位置改变；替代中字母改变，位置不变。  </p><p>将替代密码用于军事用途的第一个文件记载是恺撒著的《高卢记》。恺撒描述了他如何将密信送到正处在被围困、濒临投降的西塞罗。其中罗马字母被替换成希腊字母使得敌人根本无法看懂信息。苏托尼厄斯在公元二世纪写的《恺撒传》中对恺撒用过的其中一种替代密码作了详细的描写。恺撒只是简单地把信息中的每一个字母用字母表中的该字母后的第三个字母代替。这种密码替换通常叫做凯撒移位密码，或简单的说，凯撒密码。  凯撒密码是将每一个字母向前推移K位。如K=3，则它的每一个明文字符都由其右边第三个（模26）字符代换如将字母A换作字母D，将字母B换作字母E。  </p><p>如有这样一条指令： RETURN TO ROME  </p><p>用恺撒密码加密后就成为： UHWXUA WR URPH  </p><p>如果这份指令被敌方截获，也将不会泄密，因为字面上看不出任何意义。  </p><p>这种加密方法还可以依据移位的不同产生新的变化，如将每个字母左19位，就产生这样一个明密对照表：  </p><p>明:A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  </p><p>密:T U V W X Y Z A B C D E F G H I J K L M N O P Q R S  </p><p>暴力破解：  使用从1-25的密钥依次解密密文，看看得出来的结果是怎样的。 </p><p>参考资料：  尽管苏托尼厄斯仅提到三个位置的恺撒移位，但显然从1到25个位置的移位我们都可以使用， 因此，为了使密码有更高的安全性，单字母替换密码就出现了。  </p><p>如：  明码表 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z </p><p>密码表 Q W E R T Y U I O P A S D F G H J K L Z X C V B N M </p><p>明文 F O R E S T 密文 Y G K T L Z </p><p>只需重排密码表二十六个字母的顺序，允许密码表是明码表的任意一种重排，密钥就会增加到四千亿亿亿多种，我们就有超过4×1027种密码表。破解就变得很困难。 如何破解包括恺撒密码在内的单字母替换密码？  </p><p>方法：字母频度分析 </p><p>尽管我们不知道是谁发现了字母频度的差异可以用于破解密码。但是9世纪的科学家阿尔·金迪在《关于破译加密信息的手稿》对该技术做了最早的描述。“如果我们知道一条加密信息所使用的语言，那么破译这条加密信息的方法就是找出同样的语言写的一篇其他文章，大约一页纸长，然后我们计算其中每个字母的出现频率。我们将频率最高的字母标为1号，频率排第2的标为2号，第三标为3号，依次类推，直到数完样品文章中所有字母。然后我们观察需要破译的密文，同样分类出所有的字母，找出频率最高的字母，并全部用样本文章中最高频率的字母替换。第二高频的字母用样本中2号代替，第三则用3号替换，直到密文中所有字母均已被样本中的字母替换。” 以英文为例，首先我们以一篇或几篇一定长度的普通文章，建立字母表中每个字母的频度表。</p><p>在分析密文中的字母频率，将其对照即可破解。虽然设密者后来针对频率分析技术对以前的设密方法做了些改进，比如说引进空符号等，目的是为了打破正常的字母出现频率。但是小的改进已经无法掩盖单字母替换法的巨大缺陷了。到16世纪，最好的密码破译师已经能够破译当时大多数的加密信息。局限性： 短文可能严重偏离标准频率，加入文章少于100个字母，那么对它的解密就会比较困难。</p><p>1、开发工具：</p><p>DEV</p><p>2、代码编制：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp">凯撒：<br><br>\<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br><br> <span class="hljs-keyword">char</span> P[<span class="hljs-number">100</span>];<span class="hljs-comment">/*定义明文长度*/</span><br><br> <span class="hljs-keyword">char</span> C[<span class="hljs-number">100</span>];<span class="hljs-comment">/*定义密文长度*/</span><br><br> <span class="hljs-keyword">int</span> K=<span class="hljs-number">3</span>,i;<br><br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please input Plaintext:\n"</span>); <span class="hljs-comment">/*输入明文*/</span><br><br> gets(P); <span class="hljs-comment">/* 接受明文*/</span><br><br> <br><br> <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;P[i]!=<span class="hljs-string">'\0'</span>;i++) &#123;  <span class="hljs-comment">/*逐个判断字母的大小*/</span><br><br> <span class="hljs-keyword">if</span>(P[i]&gt;=<span class="hljs-string">'a'</span>&amp;&amp;P[i]&lt;=<span class="hljs-string">'z'</span>) <span class="hljs-comment">/*小写字母 */</span><br><br> C[i]=(P[i]-<span class="hljs-string">'a'</span>+K)%<span class="hljs-number">26</span>+<span class="hljs-string">'a'</span>;<br><br> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(P[i]&gt;=<span class="hljs-string">'A'</span>&amp;&amp;P[i]&lt;=<span class="hljs-string">'Z'</span>)<span class="hljs-comment">/*大写字母 */</span><br><br> C[i]=(P[i]-<span class="hljs-string">'A'</span>+K)%<span class="hljs-number">26</span>+<span class="hljs-string">'A'</span>;<br><br> <span class="hljs-keyword">else</span> C[i]=<span class="hljs-string">' '</span>;<span class="hljs-comment">/*如果不是字母，转换为空格*/</span><br><br> &#125;<br><br> <br><br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"The Ciphertext is :\n%s\n"</span>,C);<span class="hljs-comment">/*输出密文*/</span><br><br><span class="hljs-comment">// getch();</span><br><br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>1、程序结构化，用函数分别实现</p><p>2、对文件的加密，解密输出到文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;conio.h&gt;</span></span><br><br> <br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">menu</span><span class="hljs-params">()</span><span class="hljs-comment">/*菜单，1.加密 2.解密 3.退出*/</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-comment">//clrscr();</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n==============================================================================="</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n1.Encrypt the file"</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n2.Decrypt the file"</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n3.Quit\n"</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"===============================================================================\n"</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please select a item:"</span>);<br><br><span class="hljs-keyword">return</span>;<br><br>&#125;<br><br> <br><br><span class="hljs-function"><span class="hljs-keyword">char</span> <span class="hljs-title">encrypt</span><span class="hljs-params">(<span class="hljs-keyword">char</span> ch,<span class="hljs-keyword">int</span> n)</span><span class="hljs-comment">/*加密函数，把字符向右循环移位n*/</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">'A'</span>&amp;&amp;ch&lt;=<span class="hljs-string">'Z'</span>)<br><br>&#123;<br><br><span class="hljs-keyword">return</span> (<span class="hljs-string">'A'</span>+(ch-<span class="hljs-string">'A'</span>+n)%<span class="hljs-number">26</span>);<br><br>&#125;<br><br><span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">'a'</span>&amp;&amp;ch&lt;=<span class="hljs-string">'z'</span>)<br><br>&#123;<br><br><span class="hljs-keyword">return</span> (<span class="hljs-string">'a'</span>+(ch-<span class="hljs-string">'a'</span>+n)%<span class="hljs-number">26</span>);<br><br>&#125;<br><br><span class="hljs-keyword">return</span> ch;<br><br>&#125;<br><br> <br><br> <br><br>main()<br><br>&#123;<br><br><span class="hljs-keyword">int</span> i,n;<br><br><span class="hljs-keyword">char</span> ch0,ch1;<br><br>FILE *in,*out;<br><br><span class="hljs-keyword">char</span> infile[<span class="hljs-number">10</span>],outfile[<span class="hljs-number">10</span>];<br><br> <br><br><span class="hljs-comment">//textbackground(RED);</span><br><br><span class="hljs-comment">//textcolor(LIGHTGREEN);</span><br><br><span class="hljs-comment">//clrscr();</span><br><br> <br><br>menu();<br><br>ch0=getch();<br><br> <br><br><span class="hljs-keyword">while</span>(ch0!=<span class="hljs-string">'3'</span>)<br><br>&#123;<br><br><span class="hljs-keyword">if</span>(ch0==<span class="hljs-string">'1'</span>)<br><br>&#123;<br><br><span class="hljs-comment">//  clrscr();</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\nPlease input the infile:"</span>);<br><br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,infile);<span class="hljs-comment">/*输入需要加密的文件名*/</span><br><br> <br><br>  <span class="hljs-keyword">if</span>((in=fopen(infile,<span class="hljs-string">"r"</span>))==<span class="hljs-literal">NULL</span>)<br><br>  &#123;<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Can not open the infile!\n"</span>);<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Press any key to exit!\n"</span>);<br><br>  getch();<br><br><span class="hljs-comment">//   exit(0);</span><br><br>  &#125;<br><br> <br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please input the key:"</span>);<br><br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);<span class="hljs-comment">/*输入加密密码*/</span><br><br> <br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please input the outfile:"</span>);<br><br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,outfile);<span class="hljs-comment">/*输入加密后文件的文件名*/</span><br><br> <br><br>  <span class="hljs-keyword">if</span>((out=fopen(outfile,<span class="hljs-string">"w"</span>))==<span class="hljs-literal">NULL</span>)<br><br>  &#123;<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Can not open the outfile!\n"</span>);<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Press any key to exit!\n"</span>);<br><br>  fclose(in);<br><br>  getch();<br><br><span class="hljs-comment">//   exit(0);</span><br><br>  &#125;<br><br> <br><br>  <span class="hljs-keyword">while</span>(!feof(in))<span class="hljs-comment">/*加密*/</span><br><br>  &#123;<br><br>  fputc(encrypt(fgetc(in),n),out);<br><br>  &#125;<br><br> <br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\nEncrypt is over!\n"</span>);<br><br>  fclose(in);<br><br>  fclose(out);<br><br><span class="hljs-comment">//  sleep(1);</span><br><br>&#125;<br><br> <br><br><span class="hljs-keyword">if</span>(ch0==<span class="hljs-string">'2'</span>)<br><br>&#123;<br><br><span class="hljs-comment">//  clrscr();</span><br><br>​           <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\nPlease input the infile:"</span>);<br><br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,infile);<span class="hljs-comment">/*输入需要解密的文件名*/</span><br><br> <br><br>​            <span class="hljs-keyword">if</span>((in=fopen(infile,<span class="hljs-string">"r"</span>))==<span class="hljs-literal">NULL</span>)<br><br>  &#123;<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Can not open the infile!\n"</span>);<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Press any key to exit!\n"</span>);<br><br>  getch();<br><br><span class="hljs-comment">//   exit(0);</span><br><br>  &#125;<br><br> <br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please input the key:"</span>);<br><br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);<span class="hljs-comment">/*输入解密密码（可以为加密时候的密码）*/</span><br><br> <br><br>  n=<span class="hljs-number">26</span>-n;<br><br> <br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please input the outfile:"</span>);<br><br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,outfile);<span class="hljs-comment">/*输入解密后文件的文件名*/</span><br><br> <br><br>  <span class="hljs-keyword">if</span>((out=fopen(outfile,<span class="hljs-string">"w"</span>))==<span class="hljs-literal">NULL</span>)<br><br>  &#123;<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Can not open the outfile!\n"</span>);<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Press any key to exit!\n"</span>);<br><br>  fclose(in);<br><br>  getch();<br><br><span class="hljs-comment">//   exit(0);</span><br><br>  &#125;<br><br> <br><br>  <span class="hljs-keyword">while</span>(!feof(in))<br><br>  &#123;<br><br>  fputc(encrypt(fgetc(in),n),out);<br><br>  &#125;<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\nDecrypt is over!\n"</span>);<br><br>  fclose(in);<br><br>  fclose(out);<br><br><span class="hljs-comment">//  sleep(1);</span><br><br>&#125;<br><br> <br><br> <br><br><span class="hljs-comment">//clrscr();</span><br><br> <br><br><span class="hljs-comment">//     printf("\nGood Bye!\n");</span><br><br><span class="hljs-comment">//sleep(3);</span><br><br> <br><br> <br><br> <br><br>  getch();<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-comment">/*移位法:*/</span><br><br>#include &lt;stdio.h&gt;<br><br>#include &lt;stdlib.h&gt;<br><br>char *Encrypt(char *<span class="hljs-keyword">pwd</span>,<span class="hljs-keyword">int</span> key) <span class="hljs-comment">/*加密*/</span><br><br>&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;*(<span class="hljs-keyword">pwd</span>+i)!=<span class="hljs-string">'\0'</span>;i++)<br><br>&#123;<br><br><span class="hljs-keyword">if</span>(*(<span class="hljs-keyword">pwd</span>+i)&gt;=<span class="hljs-string">'a'</span>&amp;&amp;*(<span class="hljs-keyword">pwd</span>+i)&lt;=<span class="hljs-string">'z'</span>)<br><br>*(<span class="hljs-keyword">pwd</span>+i)=(*(<span class="hljs-keyword">pwd</span>+i)-<span class="hljs-string">'a'</span>+key)%26+<span class="hljs-string">'a'</span>;<br><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(*(<span class="hljs-keyword">pwd</span>+i)&gt;=<span class="hljs-string">'A'</span>&amp;&amp;*(<span class="hljs-keyword">pwd</span>+i)&lt;=<span class="hljs-string">'Z'</span>)<br><br>*(<span class="hljs-keyword">pwd</span>+i)=(*(<span class="hljs-keyword">pwd</span>+i)-<span class="hljs-string">'A'</span>+key)%26+<span class="hljs-string">'A'</span>;<br><br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">pwd</span>;<br><br>&#125;<br><br> <br><br>char *Decrypt(char *<span class="hljs-keyword">pwd</span>,<span class="hljs-keyword">int</span> key) <span class="hljs-comment">/*解密*/</span><br><br>&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;*(<span class="hljs-keyword">pwd</span>+i)!=<span class="hljs-string">'\0'</span>;i++)<br><br>&#123;<br><br><span class="hljs-keyword">if</span>(*(<span class="hljs-keyword">pwd</span>+i)&gt;=<span class="hljs-string">'a'</span>&amp;&amp;*(<span class="hljs-keyword">pwd</span>+i)&lt;=<span class="hljs-string">'z'</span>)<br><br>&#123;<br><br><span class="hljs-keyword">if</span>(*(<span class="hljs-keyword">pwd</span>+i)-<span class="hljs-string">'a'</span>&gt;=key%26)<br><br>*(<span class="hljs-keyword">pwd</span>+i)=*(<span class="hljs-keyword">pwd</span>+i)-key%26;<br><br><span class="hljs-keyword">else</span> *(<span class="hljs-keyword">pwd</span>+i)=<span class="hljs-string">'z'</span>-(key%26-(*(<span class="hljs-keyword">pwd</span>+i)-<span class="hljs-string">'a'</span>))<span class="hljs-number">-1</span>;<br><br>&#125;<br><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(*(<span class="hljs-keyword">pwd</span>+i)&gt;=<span class="hljs-string">'A'</span>&amp;&amp;*(<span class="hljs-keyword">pwd</span>+i)&lt;=<span class="hljs-string">'Z'</span>)<br><br>&#123;<br><br><span class="hljs-keyword">if</span>(*(<span class="hljs-keyword">pwd</span>+i)-<span class="hljs-string">'A'</span>&gt;=key%26)<br><br>*(<span class="hljs-keyword">pwd</span>+i)=*(<span class="hljs-keyword">pwd</span>+i)-key%26;<br><br><span class="hljs-keyword">else</span> *(<span class="hljs-keyword">pwd</span>+i)=<span class="hljs-string">'Z'</span>-(key%26-(*(<span class="hljs-keyword">pwd</span>+i)-<span class="hljs-string">'A'</span>))<span class="hljs-number">-1</span>;<br><br>&#125;<br><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">pwd</span>;<br><br>&#125;<br><br> <br><br><span class="hljs-keyword">int</span> main()<br><br>&#123;<br><br>char *<span class="hljs-keyword">pwd</span>;<br><br><span class="hljs-keyword">int</span> key;<br><br><span class="hljs-keyword">pwd</span>=(char*)malloc(sizeof(char));<br><br>printf(<span class="hljs-string">"Input your password:"</span>);<br><br>gets(<span class="hljs-keyword">pwd</span>);<br><br>printf(<span class="hljs-string">"Input a key:"</span>);<br><br>scanf(<span class="hljs-string">"%d"</span>,&amp;key);<br><br> <br><br>printf(<span class="hljs-string">"The Ciphertext is:"</span>);<br><br>printf(<span class="hljs-string">"%s\n"</span>,Encrypt(<span class="hljs-keyword">pwd</span>,key));<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*替换法：*/</span><br><br> <br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">table</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *keyword)</span> <span class="hljs-comment">/*筛选密钥(去重复去空格)*/</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br><br>​<span class="hljs-keyword">int</span> i,j,k;<br><br>​<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;*(keyword+i)!=<span class="hljs-string">'\0'</span>;i++)<br><br>​&#123;<br><br>​<span class="hljs-keyword">for</span>(j=i;*(keyword+j)!=<span class="hljs-string">'\0'</span>;j++)<br><br>​&#123;<br><br>​<span class="hljs-keyword">if</span>(i!=j)<br><br>​<span class="hljs-keyword">if</span>(*(keyword+i)==*(keyword+j)||*(keyword+j)==<span class="hljs-string">' '</span>)<br><br>​&#123;<br><br>​<span class="hljs-keyword">for</span>(k=j;*(keyword+k)!=<span class="hljs-string">'\0'</span>;k++)<br><br>​*(keyword+k)=*(keyword+k+<span class="hljs-number">1</span>);<br><br>​j--;<br><br>​&#125;<br><br>​&#125;<br><br>​&#125;<br><br>&#125;<br><br> <br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">newTab</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *keyword)</span> <span class="hljs-comment">/*生成密钥表*/</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br><br>​<span class="hljs-keyword">char</span> ch;<br><br>​<span class="hljs-keyword">int</span> i;<br><br>​<span class="hljs-keyword">int</span> t;<br><br>​<span class="hljs-keyword">for</span>(t=<span class="hljs-number">0</span>;*(keyword+t)!=<span class="hljs-string">'\0'</span>;t++);<br><br> <br><br>​<span class="hljs-keyword">for</span>(ch=<span class="hljs-string">'a'</span>;ch&lt;=<span class="hljs-string">'z'</span>;ch++)<br><br>​&#123;<br><br>​<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;*(keyword+i)!=ch;i++)<br><br>​&#123;<br><br>​<span class="hljs-keyword">if</span>(*(keyword+i)==<span class="hljs-string">'\0'</span>)<br><br>​&#123;<br><br>​*(keyword+t)=ch;<br><br>​t++;<br><br>​<span class="hljs-keyword">break</span>;<br><br>​&#125;<br><br>​&#125;<br><br>​&#125;<br><br>​*(keyword+t)=<span class="hljs-string">'\0'</span>;<br><br>&#125;<br><br> <br><br> <br><br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">Ciphertext</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *keyword,<span class="hljs-keyword">char</span> *Plaintext)</span> <span class="hljs-comment">/*按密码表加密*/</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br><br>​<span class="hljs-keyword">char</span> ch;<br><br>​<span class="hljs-keyword">int</span> i,j;<br><br>​<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;*(Plaintext+i)!=<span class="hljs-string">'\0'</span>;i++)<br><br>​&#123;<br><br>​<span class="hljs-keyword">for</span>(ch=<span class="hljs-string">'a'</span>,j=<span class="hljs-number">0</span>;ch&lt;=<span class="hljs-string">'z'</span>;ch++,j++)<br><br>​&#123;<br><br>​<span class="hljs-keyword">if</span>(*(Plaintext+i)==ch)<br><br>​&#123;<br><br>​*(Plaintext+i)=*(keyword+j);<br><br>​<span class="hljs-keyword">break</span>;<br><br>​&#125;<br><br>​&#125;<br><br>​&#125;<br><br>​<span class="hljs-keyword">return</span> Plaintext;<br><br>&#125;<br><br> <br><br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">Decrypt</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *keyword,<span class="hljs-keyword">char</span> *Plaintext)</span> <span class="hljs-comment">/*解密*/</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br><br>​<span class="hljs-keyword">char</span> ch;<br><br>​<span class="hljs-keyword">int</span> i,j;<br><br>​<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;*(Plaintext+i)!=<span class="hljs-string">'\0'</span>;i++)<br><br>​&#123;<br><br>​<span class="hljs-keyword">for</span>(ch=<span class="hljs-string">'a'</span>,j=<span class="hljs-number">0</span>;*(keyword+j)!=<span class="hljs-string">'\0'</span>;ch++,j++)<br><br>​&#123;<br><br>​<span class="hljs-keyword">if</span>(*(Plaintext+i)==*(keyword+j))<br><br>​&#123;<br><br>​*(Plaintext+i)=ch;<br><br>​<span class="hljs-keyword">break</span>;<br><br>​&#125;<br><br>​&#125;<br><br>​&#125;<br><br>​<span class="hljs-keyword">return</span> Plaintext;<br><br>&#125;<br><br> <br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br><br>​<span class="hljs-keyword">char</span> *keyword,*Plaintext,*tmp=<span class="hljs-literal">NULL</span>;<br><br>​keyword=(<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>));<br><br>​Plaintext=(<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>));<br><br> <br><br>​<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Input key word:"</span>);  <span class="hljs-comment">/*输入欲用密钥*/</span><br><br>​gets(keyword);<br><br>​<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Input Plaintext:"</span>); <span class="hljs-comment">/*输入要转换的明文*/</span><br><br>​gets(Plaintext);<br><br> <br><br>​table(keyword);  <span class="hljs-comment">/*去空格去重复*/</span><br><br>​newTab(keyword); <span class="hljs-comment">/*生成密码表*/</span><br><br> <br><br>​tmp=Ciphertext(keyword,Plaintext); <span class="hljs-comment">/*对应着密码表生成密文*/</span><br><br>​<span class="hljs-built_in">puts</span>(tmp); <span class="hljs-comment">/*输出密文*/</span><br><br>​<span class="hljs-built_in">puts</span>(Decrypt(keyword,tmp)); <span class="hljs-comment">/*解密输出*/</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>3、运行效果：</p><p>凯撒密码 </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps1.jpg" alt="img" loading="lazy"> </p><p>1、程序结构化，用函数分别实现</p><p>2、对文件的加密，解密输出到文件</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps2.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps3.jpg" alt="img" loading="lazy"> </p><p>/<em>移位法:</em>/</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps4.jpg" alt="img" loading="lazy"> </p><p>/<em>替换法：</em>/</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps5.jpg" alt="img" loading="lazy"> </p><p><strong>任务二、加密与隐藏软件的使用</strong></p><p>\1. 加密文件</p><p>2.解密文件</p><p>3.生成随机密码</p><p>4.生成可自解密文件</p><p>5.文件隐藏与恢复</p><p>6.伪装文件夹</p><p>1.加密文件</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps6.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps7.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps8.jpg" alt="img" loading="lazy"> </p><p>2.解密文件</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps9.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps10.jpg" alt="img" loading="lazy"> </p><p>3.生成随机密码</p><p><a href="https://suijimimashengcheng.bmcx.com/" target="_blank" rel="noopener">https://suijimimashengcheng.bmcx.com/</a></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps11.jpg" alt="img" loading="lazy"> </p><p>4.生成可自解密文件</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps12.jpg" alt="img" loading="lazy"> </p><p>5.文件隐藏与恢复</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps13.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps14.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps15.jpg" alt="img" loading="lazy"> </p><p>6.伪装文件夹</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps16.jpg" alt="img" loading="lazy"> </p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps17.jpg" alt="img" loading="lazy"> </p><p><strong>任务三、利用破解密码软件破解口令</strong></p><p>1.破解Windows7系统密码</p><p> 2.破解Office文档密码</p><p> 3.破解PDF文档密码</p><p>2.破解Office文档密码</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps18.jpg" alt="img" loading="lazy"> </p><p>3.破解PDF文档密码</p><p><a href="http://app.xunjiepdf.com/pdfaddpwd/" target="_blank" rel="noopener">http://app.xunjiepdf.com/pdfaddpwd/</a></p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps19.jpg" alt="img" loading="lazy"> </p><p>解密成功</p><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/wps22.jpg" alt="img" loading="lazy"> </p><p>八、实验小结（100字左右）</p><p>在本次实验中了解熟悉了各种加密算法，对加密算法有了更加深刻的理解，后学习了加密工具，了解了加密工具的使用，学会了伪装文件、机密文件、机密pdf 体会到信息安全的重要性。在今后做项目中，要多加注意信息的加密，本次实验受益匪浅，期待下一次的实验，在课后我也会都加学习了解加密代码，感谢老师。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实验一-加密与解密&quot;&gt;&lt;a href=&quot;#实验一-加密与解密&quot; class=&quot;headerlink&quot; title=&quot;实验一  加密与解密&quot;&gt;&lt;/a&gt;实验一  加密与解密&lt;/h2&gt;&lt;h3 id=&quot;一、实验目的&quot;&gt;&lt;a href=&quot;#一、实验目的&quot; class=&quot;he</summary>
      
    
    
    
    <category term="信息安全" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="实验" scheme="http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="信息安全" scheme="http://yoursite.com/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络笔记 考试篇</title>
    <link href="http://yoursite.com/2020/09/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%E9%A2%98/"/>
    <id>http://yoursite.com/2020/09/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A0%E9%A2%98/</id>
    <published>2020-09-06T16:00:00.000Z</published>
    <updated>2020-09-07T03:29:56.215Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-为什么计算机有了IP地址，却还要设MAC地址"><a href="#1-为什么计算机有了IP地址，却还要设MAC地址" class="headerlink" title="1.为什么计算机有了IP地址，却还要设MAC地址"></a>1.为什么计算机有了IP地址，却还要设MAC地址</h2><h2 id="2-数据传输率为2400bit-s，采用4相位调制，该链路的波特率是？"><a href="#2-数据传输率为2400bit-s，采用4相位调制，该链路的波特率是？" class="headerlink" title="2. 数据传输率为2400bit/s，采用4相位调制，该链路的波特率是？"></a>2. 数据传输率为2400bit/s，采用4相位调制，该链路的波特率是？</h2><h2 id="3-如何使用UDP来实现可靠的传输"><a href="#3-如何使用UDP来实现可靠的传输" class="headerlink" title="3. 如何使用UDP来实现可靠的传输"></a>3. 如何使用UDP来实现可靠的传输</h2><h2 id="4-原始数据M-1010001101，-P-X-X5-X4-X2-1，用CRC算法计算最终传送的值M’"><a href="#4-原始数据M-1010001101，-P-X-X5-X4-X2-1，用CRC算法计算最终传送的值M’" class="headerlink" title="4. 原始数据M=1010001101， P(X) = X5 +X4 +X2 +1，用CRC算法计算最终传送的值M’"></a>4. 原始数据M=1010001101， P(X) = X5 +X4 +X2 +1，用CRC算法计算最终传送的值M’</h2><p>5阶</p><p>1010001101 01110</p><h2 id="5-IP-地址的点分十进制，二进制，16进制之间的转换"><a href="#5-IP-地址的点分十进制，二进制，16进制之间的转换" class="headerlink" title="5.IP 地址的点分十进制，二进制，16进制之间的转换"></a>5.IP 地址的点分十进制，二进制，16进制之间的转换</h2><h1 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h1><h2 id="1-A类网络10-0-0-0，子网掩码255-224-0-0，能划分多少子网，子网号？子网的主机范围。"><a href="#1-A类网络10-0-0-0，子网掩码255-224-0-0，能划分多少子网，子网号？子网的主机范围。" class="headerlink" title="1. A类网络10.0.0.0，子网掩码255.224.0.0，能划分多少子网，子网号？子网的主机范围。"></a>1. A类网络10.0.0.0，子网掩码255.224.0.0，能划分多少子网，子网号？子网的主机范围。</h2><h2 id="2-长度为200字节的应用层数据交给传输层传送，需加上30字节的首部。再交给网络层传送，需加上40字节的首部。最后交给数据链路层的以太网传送，需添加首部和尾部共20字节。试求数据的传输效率。数据的传输效率是指发送的有用数据除以发送的总数据。"><a href="#2-长度为200字节的应用层数据交给传输层传送，需加上30字节的首部。再交给网络层传送，需加上40字节的首部。最后交给数据链路层的以太网传送，需添加首部和尾部共20字节。试求数据的传输效率。数据的传输效率是指发送的有用数据除以发送的总数据。" class="headerlink" title="2. 长度为200字节的应用层数据交给传输层传送，需加上30字节的首部。再交给网络层传送，需加上40字节的首部。最后交给数据链路层的以太网传送，需添加首部和尾部共20字节。试求数据的传输效率。数据的传输效率是指发送的有用数据除以发送的总数据。"></a>2. 长度为200字节的应用层数据交给传输层传送，需加上30字节的首部。再交给网络层传送，需加上40字节的首部。最后交给数据链路层的以太网传送，需添加首部和尾部共20字节。试求数据的传输效率。数据的传输效率是指发送的有用数据除以发送的总数据。</h2><h2 id="3-解说域名服务器解析IP地址的过程"><a href="#3-解说域名服务器解析IP地址的过程" class="headerlink" title="3. 解说域名服务器解析IP地址的过程"></a>3. 解说域名服务器解析IP地址的过程</h2><h2 id="4-描述TCP协议的拥塞控制过程"><a href="#4-描述TCP协议的拥塞控制过程" class="headerlink" title="4. 描述TCP协议的拥塞控制过程"></a>4. 描述TCP协议的拥塞控制过程</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-为什么计算机有了IP地址，却还要设MAC地址&quot;&gt;&lt;a href=&quot;#1-为什么计算机有了IP地址，却还要设MAC地址&quot; class=&quot;headerlink&quot; title=&quot;1.为什么计算机有了IP地址，却还要设MAC地址&quot;&gt;&lt;/a&gt;1.为什么计算机有了IP地址</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>数据链路层 封装成帧和透明传输</title>
    <link href="http://yoursite.com/2020/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%913/"/>
    <id>http://yoursite.com/2020/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%913/</id>
    <published>2020-08-18T08:23:52.000Z</published>
    <updated>2021-05-24T06:42:37.956Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据链路层功能概述"><a href="#数据链路层功能概述" class="headerlink" title="数据链路层功能概述"></a>数据链路层功能概述</h2><img src="/images/数据链路层/3.2/WNK6EJ[L[GL]0Y_04RHICHJ.png" alt="WNK6EJ[L[GL]0Y_04RHICHJ" style="zoom:200%;" / loading="lazy"><blockquote><p>数据链路层= = 小密    </p></blockquote><h2 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h2><p>​                  ip 数据报</p><p>帧首部 + 帧的数据部分+ 帧尾部</p><img src="/images/数据链路层/3.2/Screenshot_2020-07-29-22-52-01-839_tv.danmaku.bil.jpg" alt="Screenshot_2020-07-29-22-52-01-839_tv.danmaku.bil"  / loading="lazy"><p>组帧 ：4种方法</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/3.2/1234.png" alt="1234" loading="lazy"></p><h2 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h2><p><img src="/images/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/3.2/image-20200819100926320.png" alt="image-20200819100926320" loading="lazy"></p><blockquote><p>数据链路层（小密）看不到文件  <del>~</del> 可怜 </p></blockquote><h2 id="组帧-4种方法"><a href="#组帧-4种方法" class="headerlink" title="组帧 4种方法"></a>组帧 4种方法</h2><h3 id="1-字符计数法"><a href="#1-字符计数法" class="headerlink" title="1.字符计数法"></a>1.字符计数法</h3><p>帧首部 表示 帧个数</p><blockquote><p>例： 51234    第一帧 5个字符</p><p>8 01234568    帧 8个字符   </p></blockquote><p><img src="/images/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/3.2/123.png" alt="123" loading="lazy"></p><h3 id="2-字符填充法"><a href="#2-字符填充法" class="headerlink" title="2.字符填充法"></a>2.字符填充法</h3><p><strong>SOH</strong> —-<strong>EOT</strong></p><p>start of header       ~~        end of  transmission</p><p>0000 0001                            0000 0100 </p><p><img src="/images/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/3.2/Screenshot_2020-07-29-23-26-24-205_tv.danmaku.bil.jpg" alt="Screenshot_2020-07-29-23-26-24-205_tv.danmaku.bil" loading="lazy"></p><p>防止 中间有 <strong>EOT</strong></p><p>借助 <strong><em>ESC</em></strong></p><p><img src="/images/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/3.2/Screenshot_2020-07-29-23-28-58-935_tv.danmaku.bil.jpg" alt="Screenshot_2020-07-29-23-28-58-935_tv.danmaku.bil" loading="lazy"></p><h3 id="3-零比特填充法"><a href="#3-零比特填充法" class="headerlink" title="3.零比特填充法"></a>3.零比特填充法</h3><blockquote><p>5 <strong>“1”</strong>+ 1 <strong>“0”</strong></p></blockquote><p><img src="/images/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/3.2/Screenshot_2020-07-29-23-31-39-585_tv.danmaku.bil.jpg" alt="Screenshot_2020-07-29-23-31-39-585_tv.danmaku.bil" loading="lazy"></p><h3 id="4-违规编码法"><a href="#4-违规编码法" class="headerlink" title="4.违规编码法"></a>4.违规编码法</h3><p>曼彻斯特 编码    高-低  低-高</p><p>没有 高-高  低-低</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/3.2/Screenshot_2020-07-29-23-33-22-270_tv.danmaku.bil.jpg" alt="Screenshot_2020-07-29-23-33-22-270_tv.danmaku.bil" loading="lazy"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><blockquote><p>现在常用  </p><p><strong>3.零比特填充法</strong>  </p><p>  5 <strong>“1”</strong>+ 1 <strong>“0”</strong></p><p> <strong>4.违规编码法</strong>     </p><p> 曼彻斯特 编码    高-低  低-高</p><p> 没有 高-高  低-低</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据链路层功能概述&quot;&gt;&lt;a href=&quot;#数据链路层功能概述&quot; class=&quot;headerlink&quot; title=&quot;数据链路层功能概述&quot;&gt;&lt;/a&gt;数据链路层功能概述&lt;/h2&gt;&lt;img src=&quot;/images/数据链路层/3.2/WNK6EJ[L[GL]0Y_04</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="第3章" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC3%E7%AB%A0/"/>
    
    
    <category term="计算机网络" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络、杂</title>
    <link href="http://yoursite.com/2020/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%914/"/>
    <id>http://yoursite.com/2020/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%914/</id>
    <published>2020-08-18T08:23:52.000Z</published>
    <updated>2021-05-24T06:42:31.183Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IP数据报格式"><a href="#IP数据报格式" class="headerlink" title="IP数据报格式"></a>IP数据报格式</h2><ul><li><p>版本 ： IPV 4  / IPV 6</p></li><li><p>首部长度 ： 0000   ~ 1111     最小 0101（5）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;单位是 <strong>4B</strong>   最小为 5</p></li><li><p>TCP   6         UDP   17（遗弃）</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;IP数据报格式&quot;&gt;&lt;a href=&quot;#IP数据报格式&quot; class=&quot;headerlink&quot; title=&quot;IP数据报格式&quot;&gt;&lt;/a&gt;IP数据报格式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;版本 ： IPV 4  / IPV 6&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;首部长度</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络笔记 第二章 物理层（1）</title>
    <link href="http://yoursite.com/2020/07/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C2.1/"/>
    <id>http://yoursite.com/2020/07/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C2.1/</id>
    <published>2020-07-18T08:23:52.000Z</published>
    <updated>2021-02-01T05:52:11.696Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习内容"><a href="#学习内容" class="headerlink" title="学习内容"></a>学习内容</h2><blockquote><ol><li>通信基础</li><li>两个公式 lim （重点）</li><li>看图说话</li><li>传输介质</li><li>物理层设备</li></ol></blockquote><h2 id="物理层基本概念"><a href="#物理层基本概念" class="headerlink" title="物理层基本概念"></a>物理层基本概念</h2><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200718043631539.png" alt="" loading="lazy"></p><blockquote><p>接口（定义标准）</p></blockquote><h3 id="机械特性"><a href="#机械特性" class="headerlink" title="机械特性"></a>机械特性</h3><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200718043223747.png" alt="" loading="lazy"></p><h3 id="电气特性"><a href="#电气特性" class="headerlink" title="电气特性"></a>电气特性</h3><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200718043350719.png" alt="" loading="lazy"></p><h3 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h3><blockquote><p>电平表示何种意义</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200718043533571.png" alt="" loading="lazy"></p><h3 id="规程特性"><a href="#规程特性" class="headerlink" title="规程特性"></a>规程特性</h3><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200718043559507.png" alt="" loading="lazy"></p><h2 id="数据通信基础知识"><a href="#数据通信基础知识" class="headerlink" title="数据通信基础知识"></a>数据通信基础知识</h2><h3 id="典型的数据通信模型"><a href="#典型的数据通信模型" class="headerlink" title="典型的数据通信模型"></a>典型的数据通信模型</h3><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200718043907852.png" alt="" loading="lazy"></p><blockquote><p>调制解调器 mao</p></blockquote><h3 id="数据通信相关术语"><a href="#数据通信相关术语" class="headerlink" title="数据通信相关术语"></a>数据通信相关术语</h3><blockquote><p>通信的目的是传送消息<br>数据 ：传送信息的实体，通常是有意义的符号序列<br>信源</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200718044222215.png" alt="" loading="lazy"></p><h3 id="三种通信方式"><a href="#三种通信方式" class="headerlink" title="三种通信方式"></a>三种通信方式</h3><blockquote><p>1.单工通信<br>2.半双工通信<br>3.全双工通信</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200718044357347.png" alt="" loading="lazy"></p><h3 id="两种数据传输方式"><a href="#两种数据传输方式" class="headerlink" title="两种数据传输方式"></a>两种数据传输方式</h3><blockquote><p>1.串行传输    远距离<br>2.并行传输    近距离（计算机内部）</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200718044632450.png" alt="" loading="lazy"></p><h2 id="码元，波特，速率，带宽"><a href="#码元，波特，速率，带宽" class="headerlink" title="码元，波特，速率，带宽"></a>码元，波特，速率，带宽</h2><h3 id="码元"><a href="#码元" class="headerlink" title="码元"></a>码元</h3><blockquote><p>1 码元可以携带多个比特的信息。<br>例如 ， 2进制编码时，只有两种不同的码元，一种0状态. 一种1状态<br>4进制码元 00 01 10 11 （4种高低不同的信号波形）</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200718045429618.png" alt="" loading="lazy"></p><h3 id="速率，波特，带宽"><a href="#速率，波特，带宽" class="headerlink" title="速率，波特，带宽"></a>速率，波特，带宽</h3><blockquote><p>速率 ： 码元传输速率 ， 信息传输速率<br> 码元传输速率 ：1s 传输多少个码元<br> 1 Baud(波特) = 1 码元/ s<br>信息传输速率 ：1s 传输多少比特</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200718045920302.png" alt="" loading="lazy"><br><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200718050025372.png" alt="" loading="lazy"></p><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200718050318149.png" alt="" loading="lazy"></p><blockquote><p>8000/4<br>4进制 2位 2000<em>2<br>7200/6  1200</em>4</p></blockquote><h2 id="奈氏（nice）准则-香农定理"><a href="#奈氏（nice）准则-香农定理" class="headerlink" title="奈氏（nice）准则 香农定理 ***"></a>奈氏（nice）准则 香农定理 ***</h2><h3 id="失真"><a href="#失真" class="headerlink" title="失真"></a>失真</h3><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200720041622025.png" alt="" loading="lazy"></p><blockquote><p>1.码元传输速率<br>2.信号传输距离<br>3.噪音干扰<br>4.传输媒体质量</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200720042039316.png" alt="" loading="lazy"></p><blockquote><p>信道带宽：信道能通过的最高频率和最低频率之差<br>码间串扰：接收端收到的信号波形失去了码元之间清晰界限的现象</p></blockquote><h3 id="奈氏准则-奈韦斯特定理（为了避免码间串扰）"><a href="#奈氏准则-奈韦斯特定理（为了避免码间串扰）" class="headerlink" title="奈氏准则 奈韦斯特定理（为了避免码间串扰）"></a>奈氏准则 奈韦斯特定理（为了避免码间串扰）</h3><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200720042639841.png" alt="" loading="lazy"></p><blockquote><p>码元传输速率限制</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200720042725050.png" alt="" loading="lazy"></p><h3 id="香农定理"><a href="#香农定理" class="headerlink" title="香农定理"></a>香农定理</h3><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200720043404138.png" alt="" loading="lazy"></p><blockquote><p>信噪比（dB）= 10 log10（S/N）<br><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200720043547901.png" alt="" loading="lazy"></p></blockquote><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200720043722693.png" alt="" loading="lazy"></p><blockquote><p>30db = 10 log10 (s/b)  s/b =1000</p></blockquote><h2 id="nice-与-香浓"><a href="#nice-与-香浓" class="headerlink" title="nice 与 香浓"></a>nice 与 香浓</h2><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200720044212093.png" alt="" loading="lazy"></p><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0%E7%AC%AC/20200720044212093.png" alt="20200720044212093" loading="lazy"></p><blockquote><p>取较小的</p></blockquote><h2 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h2><h3 id="基带信号与宽带信号"><a href="#基带信号与宽带信号" class="headerlink" title="基带信号与宽带信号"></a>基带信号与宽带信号</h3><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200721041538681.png" alt="" loading="lazy"></p><blockquote><p>基带信号： 数字信道（基带传输）<br>宽带信号： 模拟信道（宽带传输） 把信号 调制<br>传输距离近，计算机网络采用 基带传输方式<br>远， 采用 宽带传输</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200721041854809.png" alt="" loading="lazy"></p><h3 id="数字数据编码为数字信号"><a href="#数字数据编码为数字信号" class="headerlink" title="数字数据编码为数字信号"></a>数字数据编码为数字信号</h3><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200721043827157.png" alt="" loading="lazy"><br><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200721042205901.png" alt="" loading="lazy"></p><blockquote><p>(1)非归零编码  高1低0</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200721042417009.png" alt="" loading="lazy"></p><blockquote><p>(4)归零编码</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200721042920386.png" alt="" loading="lazy"></p><blockquote><p>(5)反向不归零编码</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200721043545889.png" alt="" loading="lazy"></p><blockquote><p>(2)曼彻斯特编码  前高后低1 前低后高0 看具体题目规定<br>数据传输速率只有调制速率的1/2</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200721043805614.png" alt="" loading="lazy"></p><blockquote><p>(3)差分曼彻斯特 同1异0</p></blockquote><p><img src="https://gitee.com/li_zikang/lzk-image/raw/master/img/20200721043917491.png" alt="" loading="lazy"></p><blockquote><p>(6) 4B/5B 编码 编码效率为80%</p></blockquote><h3 id="数字数据调制为模拟信号"><a href="#数字数据调制为模拟信号" class="headerlink" title="数字数据调制为模拟信号"></a>数字数据调制为模拟信号</h3><blockquote><p>音频数字化<br>脉码调制  pcm</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;学习内容&quot;&gt;&lt;a href=&quot;#学习内容&quot; class=&quot;headerlink&quot; title=&quot;学习内容&quot;&gt;&lt;/a&gt;学习内容&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;通信基础&lt;/li&gt;
&lt;li&gt;两个公式 lim （重点）&lt;/li&gt;
&lt;li&gt;看图说话&lt;/</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="第2章" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%AC%AC2%E7%AB%A0/"/>
    
    
    <category term="计算机网络" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
</feed>
